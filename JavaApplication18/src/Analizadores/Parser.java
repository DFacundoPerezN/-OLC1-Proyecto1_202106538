
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\142\000\002\002\004\000\002\002\003\000\002\003" +
    "\011\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\003\000\002\004\003\000\002\006\012\000" +
    "\002\006\011\000\002\010\011\000\002\011\004\000\002" +
    "\011\003\000\002\012\007\000\002\012\007\000\002\012" +
    "\007\000\002\012\007\000\002\013\011\000\002\013\011" +
    "\000\002\016\004\000\002\016\003\000\002\017\007\000" +
    "\002\017\007\000\002\017\007\000\002\017\013\000\002" +
    "\017\013\000\002\021\003\000\002\021\005\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\020\003" +
    "\000\002\020\005\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\025\011\000" +
    "\002\025\012\000\002\026\012\000\002\026\013\000\002" +
    "\026\006\000\002\031\024\000\002\027\011\000\002\030" +
    "\010\000\002\030\011\000\002\030\006\000\002\033\011" +
    "\000\002\032\013\000\002\022\011\000\002\023\007\000" +
    "\002\023\005\000\002\023\011\000\002\036\005\000\002" +
    "\037\003\000\002\037\005\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\034\004\000\002\034\005\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\040" +
    "\012\000\002\041\005\000\002\042\005\000\002\042\005" +
    "\000\002\042\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0112\000\006\010\005\044\010\001\002\000\004\002" +
    "\000\001\002\000\004\041\u010d\001\002\000\004\002\u010c" +
    "\001\002\000\004\002\ufffe\001\002\000\004\045\011\001" +
    "\002\000\004\005\012\001\002\000\004\006\013\001\002" +
    "\000\004\010\014\001\002\000\054\005\040\017\050\034" +
    "\034\035\025\036\041\037\053\040\036\041\024\042\022" +
    "\044\026\047\020\050\044\051\045\052\060\053\055\054" +
    "\061\057\031\061\023\062\035\066\032\067\047\001\002" +
    "\000\006\012\373\040\374\001\002\000\040\003\uffd6\007" +
    "\uffd6\044\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6" +
    "\054\uffd6\057\uffd6\061\uffd6\062\uffd6\065\uffd6\066\uffd6\067" +
    "\uffd6\001\002\000\040\003\uffda\007\uffda\044\uffda\047\uffda" +
    "\050\uffda\051\uffda\052\uffda\053\uffda\054\uffda\057\uffda\061" +
    "\uffda\062\uffda\065\uffda\066\uffda\067\uffda\001\002\000\006" +
    "\012\uffbf\040\uffbf\001\002\000\040\003\uffdd\007\uffdd\044" +
    "\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd" +
    "\057\uffdd\061\uffdd\062\uffdd\065\uffdd\066\uffdd\067\uffdd\001" +
    "\002\000\102\003\uffa7\004\uffa7\006\uffa7\007\uffa7\015\uffa7" +
    "\016\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025" +
    "\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7" +
    "\043\uffa7\044\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7\053" +
    "\uffa7\054\uffa7\057\uffa7\061\uffa7\062\uffa7\065\uffa7\066\uffa7" +
    "\067\uffa7\001\002\000\004\005\352\001\002\000\102\003" +
    "\uffa8\004\uffa8\006\uffa8\007\uffa8\015\uffa8\016\uffa8\020\uffa8" +
    "\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8\027" +
    "\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\043\uffa8\044\uffa8" +
    "\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8\057" +
    "\uffa8\061\uffa8\062\uffa8\065\uffa8\066\uffa8\067\uffa8\001\002" +
    "\000\102\003\uffab\004\uffab\006\uffab\007\uffab\015\uffab\016" +
    "\uffab\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab\025\uffab" +
    "\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab\043" +
    "\uffab\044\uffab\047\uffab\050\uffab\051\uffab\052\uffab\053\uffab" +
    "\054\uffab\057\uffab\061\uffab\062\uffab\065\uffab\066\uffab\067" +
    "\uffab\001\002\000\012\040\221\046\222\070\223\071\224" +
    "\001\002\000\040\003\uffdb\007\uffdb\044\uffdb\047\uffdb\050" +
    "\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb\057\uffdb\061\uffdb" +
    "\062\uffdb\065\uffdb\066\uffdb\067\uffdb\001\002\000\040\003" +
    "\uffd9\007\uffd9\044\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9" +
    "\053\uffd9\054\uffd9\057\uffd9\061\uffd9\062\uffd9\065\uffd9\066" +
    "\uffd9\067\uffd9\001\002\000\004\005\176\001\002\000\004" +
    "\005\170\001\002\000\040\003\uffd4\007\uffd4\044\uffd4\047" +
    "\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4\057\uffd4" +
    "\061\uffd4\062\uffd4\065\uffd4\066\uffd4\067\uffd4\001\002\000" +
    "\024\005\040\017\050\034\034\035\025\036\041\037\053" +
    "\040\036\041\024\042\022\001\002\000\004\005\146\001" +
    "\002\000\102\003\uffa9\004\uffa9\006\uffa9\007\uffa9\015\uffa9" +
    "\016\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025" +
    "\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9" +
    "\043\uffa9\044\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9\053" +
    "\uffa9\054\uffa9\057\uffa9\061\uffa9\062\uffa9\065\uffa9\066\uffa9" +
    "\067\uffa9\001\002\000\036\003\135\007\145\044\026\047" +
    "\020\050\044\051\045\052\060\053\055\054\061\057\031" +
    "\061\023\062\035\066\032\067\047\001\002\000\024\005" +
    "\040\017\050\034\034\035\025\036\041\037\053\040\036" +
    "\041\024\042\022\001\002\000\102\003\uffaa\004\uffaa\006" +
    "\uffaa\007\uffaa\015\uffaa\016\uffaa\020\uffaa\021\uffaa\022\uffaa" +
    "\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031" +
    "\uffaa\032\uffaa\033\uffaa\043\uffaa\044\uffaa\047\uffaa\050\uffaa" +
    "\051\uffaa\052\uffaa\053\uffaa\054\uffaa\057\uffaa\061\uffaa\062" +
    "\uffaa\065\uffaa\066\uffaa\067\uffaa\001\002\000\040\003\uffd5" +
    "\007\uffd5\044\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053" +
    "\uffd5\054\uffd5\057\uffd5\061\uffd5\062\uffd5\065\uffd5\066\uffd5" +
    "\067\uffd5\001\002\000\072\003\ufffa\007\ufffa\020\077\021" +
    "\071\022\073\023\075\024\074\025\076\026\102\027\070" +
    "\030\067\031\100\032\066\033\103\043\072\044\ufffa\047" +
    "\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa\054\ufffa\057\ufffa" +
    "\061\ufffa\062\ufffa\065\ufffa\066\ufffa\067\ufffa\001\002\000" +
    "\006\012\uffbd\040\uffbd\001\002\000\006\012\uffbb\040\uffbb" +
    "\001\002\000\040\003\uffd8\007\uffd8\044\uffd8\047\uffd8\050" +
    "\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\057\uffd8\061\uffd8" +
    "\062\uffd8\065\uffd8\066\uffd8\067\uffd8\001\002\000\004\010" +
    "\131\001\002\000\004\010\122\001\002\000\040\003\ufffb" +
    "\007\ufffb\044\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053" +
    "\ufffb\054\ufffb\057\ufffb\061\ufffb\062\ufffb\065\ufffb\066\ufffb" +
    "\067\ufffb\001\002\000\102\003\uffa5\004\uffa5\006\uffa5\007" +
    "\uffa5\015\uffa5\016\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5" +
    "\024\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032" +
    "\uffa5\033\uffa5\043\uffa5\044\uffa5\047\uffa5\050\uffa5\051\uffa5" +
    "\052\uffa5\053\uffa5\054\uffa5\057\uffa5\061\uffa5\062\uffa5\065" +
    "\uffa5\066\uffa5\067\uffa5\001\002\000\102\003\uffa6\004\uffa6" +
    "\006\uffa6\007\uffa6\015\uffa6\016\uffa6\020\uffa6\021\uffa6\022" +
    "\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6" +
    "\031\uffa6\032\uffa6\033\uffa6\043\uffa6\044\uffa6\047\uffa6\050" +
    "\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\057\uffa6\061\uffa6" +
    "\062\uffa6\065\uffa6\066\uffa6\067\uffa6\001\002\000\040\003" +
    "\uffdc\007\uffdc\044\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc" +
    "\053\uffdc\054\uffdc\057\uffdc\061\uffdc\062\uffdc\065\uffdc\066" +
    "\uffdc\067\uffdc\001\002\000\006\012\uffbc\040\uffbc\001\002" +
    "\000\040\003\uffd3\007\uffd3\044\uffd3\047\uffd3\050\uffd3\051" +
    "\uffd3\052\uffd3\053\uffd3\054\uffd3\057\uffd3\061\uffd3\062\uffd3" +
    "\065\uffd3\066\uffd3\067\uffd3\001\002\000\040\003\uffd7\007" +
    "\uffd7\044\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7" +
    "\054\uffd7\057\uffd7\061\uffd7\062\uffd7\065\uffd7\066\uffd7\067" +
    "\uffd7\001\002\000\006\012\uffbe\040\uffbe\001\002\000\004" +
    "\014\062\001\002\000\004\055\063\001\002\000\004\005" +
    "\064\001\002\000\024\005\040\017\050\034\034\035\025" +
    "\036\041\037\053\040\036\041\024\042\022\001\002\000" +
    "\036\006\101\020\077\021\071\022\073\023\075\024\074" +
    "\025\076\026\102\027\070\030\067\031\100\032\066\033" +
    "\103\043\072\001\002\000\024\005\040\017\050\034\034" +
    "\035\025\036\041\037\053\040\036\041\024\042\022\001" +
    "\002\000\024\005\040\017\050\034\034\035\025\036\041" +
    "\037\053\040\036\041\024\042\022\001\002\000\024\005" +
    "\040\017\050\034\034\035\025\036\041\037\053\040\036" +
    "\041\024\042\022\001\002\000\024\005\040\017\050\034" +
    "\034\035\025\036\041\037\053\040\036\041\024\042\022" +
    "\001\002\000\024\005\040\017\050\034\034\035\025\036" +
    "\041\037\053\040\036\041\024\042\022\001\002\000\024" +
    "\005\040\017\050\034\034\035\025\036\041\037\053\040" +
    "\036\041\024\042\022\001\002\000\024\005\040\017\050" +
    "\034\034\035\025\036\041\037\053\040\036\041\024\042" +
    "\022\001\002\000\024\005\040\017\050\034\034\035\025" +
    "\036\041\037\053\040\036\041\024\042\022\001\002\000" +
    "\024\005\040\017\050\034\034\035\025\036\041\037\053" +
    "\040\036\041\024\042\022\001\002\000\024\005\040\017" +
    "\050\034\034\035\025\036\041\037\053\040\036\041\024" +
    "\042\022\001\002\000\024\005\040\017\050\034\034\035" +
    "\025\036\041\037\053\040\036\041\024\042\022\001\002" +
    "\000\004\004\106\001\002\000\024\005\040\017\050\034" +
    "\034\035\025\036\041\037\053\040\036\041\024\042\022" +
    "\001\002\000\024\005\040\017\050\034\034\035\025\036" +
    "\041\037\053\040\036\041\024\042\022\001\002\000\102" +
    "\003\uffae\004\uffae\006\uffae\007\uffae\015\uffae\016\uffae\020" +
    "\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae" +
    "\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae\043\072\044" +
    "\uffae\047\uffae\050\uffae\051\uffae\052\uffae\053\uffae\054\uffae" +
    "\057\uffae\061\uffae\062\uffae\065\uffae\066\uffae\067\uffae\001" +
    "\002\000\102\003\uffb1\004\uffb1\006\uffb1\007\uffb1\015\uffb1" +
    "\016\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025" +
    "\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\066\033\103" +
    "\043\072\044\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053" +
    "\uffb1\054\uffb1\057\uffb1\061\uffb1\062\uffb1\065\uffb1\066\uffb1" +
    "\067\uffb1\001\002\000\040\003\uffc6\007\uffc6\044\uffc6\047" +
    "\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\057\uffc6" +
    "\061\uffc6\062\uffc6\065\uffc6\066\uffc6\067\uffc6\001\002\000" +
    "\102\003\uffb0\004\uffb0\006\uffb0\007\uffb0\015\uffb0\016\uffb0" +
    "\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026" +
    "\uffb0\027\uffb0\030\uffb0\031\uffb0\032\066\033\103\043\072" +
    "\044\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054" +
    "\uffb0\057\uffb0\061\uffb0\062\uffb0\065\uffb0\066\uffb0\067\uffb0" +
    "\001\002\000\102\003\uffba\004\uffba\006\uffba\007\uffba\015" +
    "\uffba\016\uffba\020\uffba\021\uffba\022\073\023\075\024\074" +
    "\025\076\026\102\027\070\030\067\031\100\032\066\033" +
    "\103\043\072\044\uffba\047\uffba\050\uffba\051\uffba\052\uffba" +
    "\053\uffba\054\uffba\057\uffba\061\uffba\062\uffba\065\uffba\066" +
    "\uffba\067\uffba\001\002\000\102\003\uffb5\004\uffb5\006\uffb5" +
    "\007\uffb5\015\uffb5\016\uffb5\020\uffb5\021\uffb5\022\uffb5\023" +
    "\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5" +
    "\032\066\033\103\043\072\044\uffb5\047\uffb5\050\uffb5\051" +
    "\uffb5\052\uffb5\053\uffb5\054\uffb5\057\uffb5\061\uffb5\062\uffb5" +
    "\065\uffb5\066\uffb5\067\uffb5\001\002\000\102\003\uffb6\004" +
    "\uffb6\006\uffb6\007\uffb6\015\uffb6\016\uffb6\020\uffb6\021\uffb6" +
    "\022\uffb6\023\uffb6\024\074\025\076\026\102\027\070\030" +
    "\067\031\100\032\066\033\103\043\072\044\uffb6\047\uffb6" +
    "\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\057\uffb6\061" +
    "\uffb6\062\uffb6\065\uffb6\066\uffb6\067\uffb6\001\002\000\102" +
    "\003\uffb4\004\uffb4\006\uffb4\007\uffb4\015\uffb4\016\uffb4\020" +
    "\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4" +
    "\027\uffb4\030\uffb4\031\uffb4\032\066\033\103\043\072\044" +
    "\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4" +
    "\057\uffb4\061\uffb4\062\uffb4\065\uffb4\066\uffb4\067\uffb4\001" +
    "\002\000\102\003\uffb9\004\uffb9\006\uffb9\007\uffb9\015\uffb9" +
    "\016\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\074\025" +
    "\076\026\102\027\070\030\067\031\100\032\066\033\103" +
    "\043\072\044\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053" +
    "\uffb9\054\uffb9\057\uffb9\061\uffb9\062\uffb9\065\uffb9\066\uffb9" +
    "\067\uffb9\001\002\000\102\003\uffb7\004\uffb7\006\uffb7\007" +
    "\uffb7\015\uffb7\016\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7" +
    "\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032" +
    "\uffb7\033\uffb7\043\072\044\uffb7\047\uffb7\050\uffb7\051\uffb7" +
    "\052\uffb7\053\uffb7\054\uffb7\057\uffb7\061\uffb7\062\uffb7\065" +
    "\uffb7\066\uffb7\067\uffb7\001\002\000\102\003\uffb8\004\uffb8" +
    "\006\uffb8\007\uffb8\015\uffb8\016\uffb8\020\uffb8\021\uffb8\022" +
    "\073\023\075\024\074\025\076\026\102\027\070\030\067" +
    "\031\100\032\066\033\103\043\072\044\uffb8\047\uffb8\050" +
    "\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\057\uffb8\061\uffb8" +
    "\062\uffb8\065\uffb8\066\uffb8\067\uffb8\001\002\000\102\003" +
    "\uffb3\004\uffb3\006\uffb3\007\uffb3\015\uffb3\016\uffb3\020\uffb3" +
    "\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027" +
    "\uffb3\030\uffb3\031\uffb3\032\066\033\103\043\072\044\uffb3" +
    "\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\057" +
    "\uffb3\061\uffb3\062\uffb3\065\uffb3\066\uffb3\067\uffb3\001\002" +
    "\000\102\003\uffb2\004\uffb2\006\uffb2\007\uffb2\015\uffb2\016" +
    "\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2" +
    "\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\066\033\103\043" +
    "\072\044\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2" +
    "\054\uffb2\057\uffb2\061\uffb2\062\uffb2\065\uffb2\066\uffb2\067" +
    "\uffb2\001\002\000\102\003\uffaf\004\uffaf\006\uffaf\007\uffaf" +
    "\015\uffaf\016\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024" +
    "\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf" +
    "\033\uffaf\043\072\044\uffaf\047\uffaf\050\uffaf\051\uffaf\052" +
    "\uffaf\053\uffaf\054\uffaf\057\uffaf\061\uffaf\062\uffaf\065\uffaf" +
    "\066\uffaf\067\uffaf\001\002\000\004\056\123\001\002\000" +
    "\004\015\124\001\002\000\004\041\125\001\002\000\004" +
    "\015\126\001\002\000\004\041\127\001\002\000\004\007" +
    "\130\001\002\000\102\003\uffa4\004\uffa4\006\uffa4\007\uffa4" +
    "\015\uffa4\016\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024" +
    "\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4" +
    "\033\uffa4\043\uffa4\044\uffa4\047\uffa4\050\uffa4\051\uffa4\052" +
    "\uffa4\053\uffa4\054\uffa4\057\uffa4\061\uffa4\062\uffa4\065\uffa4" +
    "\066\uffa4\067\uffa4\001\002\000\054\005\040\017\050\034" +
    "\034\035\025\036\041\037\053\040\036\041\024\042\022" +
    "\044\026\047\020\050\044\051\045\052\060\053\055\054" +
    "\061\057\031\061\023\062\035\066\032\067\047\001\002" +
    "\000\036\003\135\007\133\044\026\047\020\050\044\051" +
    "\045\052\060\053\055\054\061\057\031\061\023\062\035" +
    "\066\032\067\047\001\002\000\004\066\136\001\002\000" +
    "\040\003\ufffd\007\ufffd\044\ufffd\047\ufffd\050\ufffd\051\ufffd" +
    "\052\ufffd\053\ufffd\054\ufffd\057\ufffd\061\ufffd\062\ufffd\065" +
    "\ufffd\066\ufffd\067\ufffd\001\002\000\040\003\ufffc\007\ufffc" +
    "\044\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\054" +
    "\ufffc\057\ufffc\061\ufffc\062\ufffc\065\ufffc\066\ufffc\067\ufffc" +
    "\001\002\000\004\005\137\001\002\000\024\005\040\017" +
    "\050\034\034\035\025\036\041\037\053\040\036\041\024" +
    "\042\022\001\002\000\036\006\141\020\077\021\071\022" +
    "\073\023\075\024\074\025\076\026\102\027\070\030\067" +
    "\031\100\032\066\033\103\043\072\001\002\000\004\004" +
    "\142\001\002\000\040\003\uffc7\007\uffc7\044\uffc7\047\uffc7" +
    "\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\057\uffc7\061" +
    "\uffc7\062\uffc7\065\uffc7\066\uffc7\067\uffc7\001\002\000\036" +
    "\006\144\020\077\021\071\022\073\023\075\024\074\025" +
    "\076\026\102\027\070\030\067\031\100\032\066\033\103" +
    "\043\072\001\002\000\102\003\uffac\004\uffac\006\uffac\007" +
    "\uffac\015\uffac\016\uffac\020\uffac\021\uffac\022\uffac\023\uffac" +
    "\024\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032" +
    "\uffac\033\uffac\043\uffac\044\uffac\047\uffac\050\uffac\051\uffac" +
    "\052\uffac\053\uffac\054\uffac\057\uffac\061\uffac\062\uffac\065" +
    "\uffac\066\uffac\067\uffac\001\002\000\004\002\uffff\001\002" +
    "\000\004\040\147\001\002\000\004\006\150\001\002\000" +
    "\004\010\151\001\002\000\006\063\154\064\152\001\002" +
    "\000\054\005\040\017\050\034\034\035\025\036\041\037" +
    "\053\040\036\041\024\042\022\044\026\047\020\050\044" +
    "\051\045\052\060\053\055\054\061\057\031\061\023\062" +
    "\035\066\032\067\047\001\002\000\004\007\163\001\002" +
    "\000\024\005\040\017\050\034\034\035\025\036\041\037" +
    "\053\040\036\041\024\042\022\001\002\000\036\016\156" +
    "\020\077\021\071\022\073\023\075\024\074\025\076\026" +
    "\102\027\070\030\067\031\100\032\066\033\103\043\072" +
    "\001\002\000\054\005\040\017\050\034\034\035\025\036" +
    "\041\037\053\040\036\041\024\042\022\044\026\047\020" +
    "\050\044\051\045\052\060\053\055\054\061\057\031\061" +
    "\023\062\035\066\032\067\047\001\002\000\036\003\135" +
    "\044\026\047\020\050\044\051\045\052\060\053\055\054" +
    "\061\057\031\061\023\062\035\065\160\066\032\067\047" +
    "\001\002\000\004\004\161\001\002\000\010\007\uffcb\063" +
    "\154\064\152\001\002\000\004\007\uffca\001\002\000\040" +
    "\003\uffcc\007\uffcc\044\uffcc\047\uffcc\050\uffcc\051\uffcc\052" +
    "\uffcc\053\uffcc\054\uffcc\057\uffcc\061\uffcc\062\uffcc\065\uffcc" +
    "\066\uffcc\067\uffcc\001\002\000\036\003\135\044\026\047" +
    "\020\050\044\051\045\052\060\053\055\054\061\057\031" +
    "\061\023\062\035\065\165\066\032\067\047\001\002\000" +
    "\004\004\166\001\002\000\004\007\uffc9\001\002\000\102" +
    "\003\uffad\004\uffad\006\uffad\007\uffad\015\uffad\016\uffad\020" +
    "\077\021\071\022\073\023\075\024\074\025\076\026\102" +
    "\027\070\030\067\031\100\032\066\033\103\043\072\044" +
    "\uffad\047\uffad\050\uffad\051\uffad\052\uffad\053\uffad\054\uffad" +
    "\057\uffad\061\uffad\062\uffad\065\uffad\066\uffad\067\uffad\001" +
    "\002\000\024\005\040\017\050\034\034\035\025\036\041" +
    "\037\053\040\036\041\024\042\022\001\002\000\036\006" +
    "\172\020\077\021\071\022\073\023\075\024\074\025\076" +
    "\026\102\027\070\030\067\031\100\032\066\033\103\043" +
    "\072\001\002\000\004\010\173\001\002\000\054\005\040" +
    "\017\050\034\034\035\025\036\041\037\053\040\036\041" +
    "\024\042\022\044\026\047\020\050\044\051\045\052\060" +
    "\053\055\054\061\057\031\061\023\062\035\066\032\067" +
    "\047\001\002\000\036\003\135\007\175\044\026\047\020" +
    "\050\044\051\045\052\060\053\055\054\061\057\031\061" +
    "\023\062\035\066\032\067\047\001\002\000\040\003\uffc8" +
    "\007\uffc8\044\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053" +
    "\uffc8\054\uffc8\057\uffc8\061\uffc8\062\uffc8\065\uffc8\066\uffc8" +
    "\067\uffc8\001\002\000\024\005\040\017\050\034\034\035" +
    "\025\036\041\037\053\040\036\041\024\042\022\001\002" +
    "\000\036\006\200\020\077\021\071\022\073\023\075\024" +
    "\074\025\076\026\102\027\070\030\067\031\100\032\066" +
    "\033\103\043\072\001\002\000\004\010\201\001\002\000" +
    "\054\005\040\017\050\034\034\035\025\036\041\037\053" +
    "\040\036\041\024\042\022\044\026\047\020\050\044\051" +
    "\045\052\060\053\055\054\061\057\031\061\023\062\035" +
    "\066\032\067\047\001\002\000\036\003\135\007\203\044" +
    "\026\047\020\050\044\051\045\052\060\053\055\054\061" +
    "\057\031\061\023\062\035\066\032\067\047\001\002\000" +
    "\042\003\uffd2\007\uffd2\044\uffd2\047\uffd2\050\uffd2\051\uffd2" +
    "\052\uffd2\053\uffd2\054\uffd2\057\uffd2\060\204\061\uffd2\062" +
    "\uffd2\065\uffd2\066\uffd2\067\uffd2\001\002\000\006\010\206" +
    "\057\207\001\002\000\040\003\uffd1\007\uffd1\044\uffd1\047" +
    "\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\057\uffd1" +
    "\061\uffd1\062\uffd1\065\uffd1\066\uffd1\067\uffd1\001\002\000" +
    "\054\005\040\017\050\034\034\035\025\036\041\037\053" +
    "\040\036\041\024\042\022\044\026\047\020\050\044\051" +
    "\045\052\060\053\055\054\061\057\031\061\023\062\035" +
    "\066\032\067\047\001\002\000\004\005\210\001\002\000" +
    "\024\005\040\017\050\034\034\035\025\036\041\037\053" +
    "\040\036\041\024\042\022\001\002\000\036\006\212\020" +
    "\077\021\071\022\073\023\075\024\074\025\076\026\102" +
    "\027\070\030\067\031\100\032\066\033\103\043\072\001" +
    "\002\000\004\010\213\001\002\000\054\005\040\017\050" +
    "\034\034\035\025\036\041\037\053\040\036\041\024\042" +
    "\022\044\026\047\020\050\044\051\045\052\060\053\055" +
    "\054\061\057\031\061\023\062\035\066\032\067\047\001" +
    "\002\000\036\003\135\007\215\044\026\047\020\050\044" +
    "\051\045\052\060\053\055\054\061\057\031\061\023\062" +
    "\035\066\032\067\047\001\002\000\042\003\uffd0\007\uffd0" +
    "\044\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054" +
    "\uffd0\057\uffd0\060\204\061\uffd0\062\uffd0\065\uffd0\066\uffd0" +
    "\067\uffd0\001\002\000\040\003\uffcf\007\uffcf\044\uffcf\047" +
    "\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\057\uffcf" +
    "\061\uffcf\062\uffcf\065\uffcf\066\uffcf\067\uffcf\001\002\000" +
    "\036\003\135\007\220\044\026\047\020\050\044\051\045" +
    "\052\060\053\055\054\061\057\031\061\023\062\035\066" +
    "\032\067\047\001\002\000\040\003\uffce\007\uffce\044\uffce" +
    "\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce\054\uffce\057" +
    "\uffce\061\uffce\062\uffce\065\uffce\066\uffce\067\uffce\001\002" +
    "\000\004\005\340\001\002\000\004\005\313\001\002\000" +
    "\004\005\306\001\002\000\004\005\225\001\002\000\004" +
    "\006\226\001\002\000\004\010\227\001\002\000\006\050" +
    "\232\052\233\001\002\000\010\007\uffed\050\232\052\233" +
    "\001\002\000\004\007\304\001\002\000\012\012\252\072" +
    "\253\075\255\076\254\001\002\000\004\012\234\001\002" +
    "\000\004\011\235\001\002\000\004\074\236\001\002\000" +
    "\004\013\237\001\002\000\004\010\240\001\002\000\010" +
    "\017\050\036\244\040\241\001\002\000\006\007\uffe3\015" +
    "\uffe3\001\002\000\006\007\246\015\247\001\002\000\006" +
    "\007\uffe7\015\uffe7\001\002\000\006\007\uffe5\015\uffe5\001" +
    "\002\000\006\007\uffe4\015\uffe4\001\002\000\004\004\251" +
    "\001\002\000\010\017\050\036\244\040\241\001\002\000" +
    "\006\007\uffe6\015\uffe6\001\002\000\010\007\uffe8\050\uffe8" +
    "\052\uffe8\001\002\000\004\011\272\001\002\000\004\013" +
    "\267\001\002\000\004\013\264\001\002\000\004\013\256" +
    "\001\002\000\010\017\050\040\257\041\261\001\002\000" +
    "\010\004\uffde\007\uffde\015\uffde\001\002\000\004\004\263" +
    "\001\002\000\010\004\uffe0\007\uffe0\015\uffe0\001\002\000" +
    "\010\004\uffdf\007\uffdf\015\uffdf\001\002\000\010\007\uffeb" +
    "\050\uffeb\052\uffeb\001\002\000\010\017\050\040\257\041" +
    "\261\001\002\000\004\004\266\001\002\000\010\007\uffea" +
    "\050\uffea\052\uffea\001\002\000\010\017\050\040\257\041" +
    "\261\001\002\000\004\004\271\001\002\000\010\007\uffec" +
    "\050\uffec\052\uffec\001\002\000\004\073\273\001\002\000" +
    "\004\013\274\001\002\000\004\010\275\001\002\000\010" +
    "\017\050\040\257\041\261\001\002\000\006\007\300\015" +
    "\301\001\002\000\006\007\uffe2\015\uffe2\001\002\000\004" +
    "\004\303\001\002\000\010\017\050\040\257\041\261\001" +
    "\002\000\006\007\uffe1\015\uffe1\001\002\000\010\007\uffe9" +
    "\050\uffe9\052\uffe9\001\002\000\040\003\uffef\007\uffef\044" +
    "\uffef\047\uffef\050\uffef\051\uffef\052\uffef\053\uffef\054\uffef" +
    "\057\uffef\061\uffef\062\uffef\065\uffef\066\uffef\067\uffef\001" +
    "\002\000\004\007\uffee\001\002\000\004\006\307\001\002" +
    "\000\004\010\310\001\002\000\006\050\232\052\233\001" +
    "\002\000\004\007\312\001\002\000\040\003\ufff0\007\ufff0" +
    "\044\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0\054" +
    "\ufff0\057\ufff0\061\ufff0\062\ufff0\065\ufff0\066\ufff0\067\ufff0" +
    "\001\002\000\004\006\314\001\002\000\004\010\315\001" +
    "\002\000\006\050\320\052\321\001\002\000\004\007\337" +
    "\001\002\000\010\007\ufff5\050\320\052\321\001\002\000" +
    "\004\040\330\001\002\000\004\040\322\001\002\000\004" +
    "\013\323\001\002\000\006\017\050\036\324\001\002\000" +
    "\004\004\327\001\002\000\004\004\326\001\002\000\010" +
    "\007\ufff1\050\ufff1\052\ufff1\001\002\000\010\007\ufff2\050" +
    "\ufff2\052\ufff2\001\002\000\004\013\331\001\002\000\006" +
    "\017\050\041\332\001\002\000\004\004\335\001\002\000" +
    "\004\004\334\001\002\000\010\007\ufff3\050\ufff3\052\ufff3" +
    "\001\002\000\010\007\ufff4\050\ufff4\052\ufff4\001\002\000" +
    "\004\007\ufff6\001\002\000\040\003\ufff7\007\ufff7\044\ufff7" +
    "\047\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7\057" +
    "\ufff7\061\ufff7\062\ufff7\065\ufff7\066\ufff7\067\ufff7\001\002" +
    "\000\026\005\040\006\342\017\050\034\034\035\025\036" +
    "\041\037\053\040\036\041\024\042\022\001\002\000\036" +
    "\006\346\020\077\021\071\022\073\023\075\024\074\025" +
    "\076\026\102\027\070\030\067\031\100\032\066\033\103" +
    "\043\072\001\002\000\004\010\343\001\002\000\054\005" +
    "\040\017\050\034\034\035\025\036\041\037\053\040\036" +
    "\041\024\042\022\044\026\047\020\050\044\051\045\052" +
    "\060\053\055\054\061\057\031\061\023\062\035\066\032" +
    "\067\047\001\002\000\036\003\135\007\345\044\026\047" +
    "\020\050\044\051\045\052\060\053\055\054\061\057\031" +
    "\061\023\062\035\066\032\067\047\001\002\000\040\003" +
    "\ufff8\007\ufff8\044\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8" +
    "\053\ufff8\054\ufff8\057\ufff8\061\ufff8\062\ufff8\065\ufff8\066" +
    "\ufff8\067\ufff8\001\002\000\004\010\347\001\002\000\054" +
    "\005\040\017\050\034\034\035\025\036\041\037\053\040" +
    "\036\041\024\042\022\044\026\047\020\050\044\051\045" +
    "\052\060\053\055\054\061\057\031\061\023\062\035\066" +
    "\032\067\047\001\002\000\036\003\135\007\351\044\026" +
    "\047\020\050\044\051\045\052\060\053\055\054\061\057" +
    "\031\061\023\062\035\066\032\067\047\001\002\000\040" +
    "\003\ufff9\007\ufff9\044\ufff9\047\ufff9\050\ufff9\051\ufff9\052" +
    "\ufff9\053\ufff9\054\ufff9\057\ufff9\061\ufff9\062\ufff9\065\ufff9" +
    "\066\ufff9\067\ufff9\001\002\000\014\047\020\050\044\051" +
    "\045\052\060\053\055\001\002\000\004\040\354\001\002" +
    "\000\004\013\355\001\002\000\024\005\040\017\050\034" +
    "\034\035\025\036\041\037\053\040\036\041\024\042\022" +
    "\001\002\000\036\004\357\020\077\021\071\022\073\023" +
    "\075\024\074\025\076\026\102\027\070\030\067\031\100" +
    "\032\066\033\103\043\072\001\002\000\004\040\360\001" +
    "\002\000\004\024\361\001\002\000\004\035\362\001\002" +
    "\000\004\004\363\001\002\000\004\040\364\001\002\000" +
    "\004\020\365\001\002\000\004\020\366\001\002\000\004" +
    "\006\367\001\002\000\004\010\370\001\002\000\054\005" +
    "\040\017\050\034\034\035\025\036\041\037\053\040\036" +
    "\041\024\042\022\044\026\047\020\050\044\051\045\052" +
    "\060\053\055\054\061\057\031\061\023\062\035\066\032" +
    "\067\047\001\002\000\036\003\135\007\372\044\026\047" +
    "\020\050\044\051\045\052\060\053\055\054\061\057\031" +
    "\061\023\062\035\066\032\067\047\001\002\000\040\003" +
    "\uffcd\007\uffcd\044\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd" +
    "\053\uffcd\054\uffcd\057\uffcd\061\uffcd\062\uffcd\065\uffcd\066" +
    "\uffcd\067\uffcd\001\002\000\004\011\u0101\001\002\000\006" +
    "\004\376\013\375\001\002\000\024\005\040\017\050\034" +
    "\034\035\025\036\041\037\053\040\036\041\024\042\022" +
    "\001\002\000\040\003\uffc4\007\uffc4\044\uffc4\047\uffc4\050" +
    "\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\057\uffc4\061\uffc4" +
    "\062\uffc4\065\uffc4\066\uffc4\067\uffc4\001\002\000\036\004" +
    "\u0100\020\077\021\071\022\073\023\075\024\074\025\076" +
    "\026\102\027\070\030\067\031\100\032\066\033\103\043" +
    "\072\001\002\000\040\003\uffc5\007\uffc5\044\uffc5\047\uffc5" +
    "\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\057\uffc5\061" +
    "\uffc5\062\uffc5\065\uffc5\066\uffc5\067\uffc5\001\002\000\004" +
    "\040\u0102\001\002\000\004\013\u0103\001\002\000\004\010" +
    "\u0104\001\002\000\024\005\040\017\050\034\034\035\025" +
    "\036\041\037\053\040\036\041\024\042\022\001\002\000" +
    "\004\004\u0106\001\002\000\040\003\uffc3\007\uffc3\044\uffc3" +
    "\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\057" +
    "\uffc3\061\uffc3\062\uffc3\065\uffc3\066\uffc3\067\uffc3\001\002" +
    "\000\006\007\u0109\015\u010a\001\002\000\040\007\uffc1\015" +
    "\uffc1\020\077\021\071\022\073\023\075\024\074\025\076" +
    "\026\102\027\070\030\067\031\100\032\066\033\103\043" +
    "\072\001\002\000\004\004\uffc2\001\002\000\024\005\040" +
    "\017\050\034\034\035\025\036\041\037\053\040\036\041" +
    "\024\042\022\001\002\000\006\007\uffc0\015\uffc0\001\002" +
    "\000\004\002\001\001\002\000\004\016\u0112\001\002\000" +
    "\006\007\u0110\015\u010f\001\002\000\004\041\u010d\001\002" +
    "\000\004\002\uffa3\001\002\000\006\007\uffa0\015\uffa0\001" +
    "\002\000\006\036\u0114\041\u0113\001\002\000\006\007\uffa2" +
    "\015\uffa2\001\002\000\006\007\uffa1\015\uffa1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0112\000\010\002\005\003\003\041\006\001\001\000" +
    "\002\001\001\000\004\042\u010d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\004\036\005\050" +
    "\006\055\010\041\013\032\022\020\023\053\024\026\025" +
    "\016\027\045\031\027\032\015\033\056\034\042\035\014" +
    "\040\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\034\166\040\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\005\133\006\055\010\041\013\032\022" +
    "\020\023\053\024\026\025\016\027\045\031\027\032\015" +
    "\033\056\035\014\001\001\000\006\034\142\040\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\034\064\040\051\001\001\000\002\001\001\000\006" +
    "\034\120\040\051\001\001\000\006\034\117\040\051\001" +
    "\001\000\006\034\116\040\051\001\001\000\006\034\115" +
    "\040\051\001\001\000\006\034\114\040\051\001\001\000" +
    "\006\034\113\040\051\001\001\000\006\034\112\040\051" +
    "\001\001\000\006\034\111\040\051\001\001\000\006\034" +
    "\110\040\051\001\001\000\006\034\107\040\051\001\001" +
    "\000\006\034\106\040\051\001\001\000\002\001\001\000" +
    "\006\034\104\040\051\001\001\000\006\034\103\040\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\004\131\005" +
    "\050\006\055\010\041\013\032\022\020\023\053\024\026" +
    "\025\016\027\045\031\027\032\015\033\056\034\042\035" +
    "\014\040\051\001\001\000\034\005\133\006\055\010\041" +
    "\013\032\022\020\023\053\024\026\025\016\027\045\031" +
    "\027\032\015\033\056\035\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\034\137\040\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\152\001\001\000\042\004" +
    "\163\005\050\006\055\010\041\013\032\022\020\023\053" +
    "\024\026\025\016\027\045\031\027\032\015\033\056\034" +
    "\042\035\014\040\051\001\001\000\002\001\001\000\006" +
    "\034\154\040\051\001\001\000\002\001\001\000\042\004" +
    "\156\005\050\006\055\010\041\013\032\022\020\023\053" +
    "\024\026\025\016\027\045\031\027\032\015\033\056\034" +
    "\042\035\014\040\051\001\001\000\034\005\133\006\055" +
    "\010\041\013\032\022\020\023\053\024\026\025\016\027" +
    "\045\031\027\032\015\033\056\035\014\001\001\000\002" +
    "\001\001\000\004\030\161\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\005\133\006\055\010\041\013\032" +
    "\022\020\023\053\024\026\025\016\027\045\031\027\032" +
    "\015\033\056\035\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\034\170\040\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\004\173" +
    "\005\050\006\055\010\041\013\032\022\020\023\053\024" +
    "\026\025\016\027\045\031\027\032\015\033\056\034\042" +
    "\035\014\040\051\001\001\000\034\005\133\006\055\010" +
    "\041\013\032\022\020\023\053\024\026\025\016\027\045" +
    "\031\027\032\015\033\056\035\014\001\001\000\002\001" +
    "\001\000\006\034\176\040\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\004\201\005\050\006\055\010" +
    "\041\013\032\022\020\023\053\024\026\025\016\027\045" +
    "\031\027\032\015\033\056\034\042\035\014\040\051\001" +
    "\001\000\034\005\133\006\055\010\041\013\032\022\020" +
    "\023\053\024\026\025\016\027\045\031\027\032\015\033" +
    "\056\035\014\001\001\000\004\026\204\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\004\216\005\050\006" +
    "\055\010\041\013\032\022\020\023\053\024\026\025\016" +
    "\027\045\031\027\032\015\033\056\034\042\035\014\040" +
    "\051\001\001\000\002\001\001\000\006\034\210\040\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\004" +
    "\213\005\050\006\055\010\041\013\032\022\020\023\053" +
    "\024\026\025\016\027\045\031\027\032\015\033\056\034" +
    "\042\035\014\040\051\001\001\000\034\005\133\006\055" +
    "\010\041\013\032\022\020\023\053\024\026\025\016\027" +
    "\045\031\027\032\015\033\056\035\014\001\001\000\004" +
    "\026\215\001\001\000\002\001\001\000\034\005\133\006" +
    "\055\010\041\013\032\022\020\023\053\024\026\025\016" +
    "\027\045\031\027\032\015\033\056\035\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\230\017\227\001\001\000\006\016\304" +
    "\017\227\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\242\021\241\040" +
    "\244\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\015\242\021\247\040\244\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\257" +
    "\040\261\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\264\040\261\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\267\040\261\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\014\276\020\275\040\261\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\014\276\020\301\040\261\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\310\017\227" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\315\012\316\001\001" +
    "\000\002\001\001\000\006\011\335\012\316\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\324\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\332\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\034\340\040\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\004\343\005\050\006\055" +
    "\010\041\013\032\022\020\023\053\024\026\025\016\027" +
    "\045\031\027\032\015\033\056\034\042\035\014\040\051" +
    "\001\001\000\034\005\133\006\055\010\041\013\032\022" +
    "\020\023\053\024\026\025\016\027\045\031\027\032\015" +
    "\033\056\035\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\004\347\005\050\006\055\010\041\013\032" +
    "\022\020\023\053\024\026\025\016\027\045\031\027\032" +
    "\015\033\056\034\042\035\014\040\051\001\001\000\034" +
    "\005\133\006\055\010\041\013\032\022\020\023\053\024" +
    "\026\025\016\027\045\031\027\032\015\033\056\035\014" +
    "\001\001\000\002\001\001\000\004\035\352\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\034\355\040\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\004\370\005\050\006\055\010\041" +
    "\013\032\022\020\023\053\024\026\025\016\027\045\031" +
    "\027\032\015\033\056\034\042\035\014\040\051\001\001" +
    "\000\034\005\133\006\055\010\041\013\032\022\020\023" +
    "\053\024\026\025\016\027\045\031\027\032\015\033\056" +
    "\035\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\034\376\040\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\u0104\001\001\000\010" +
    "\034\u0107\037\u0106\040\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\034\u0107\037\u010a\040\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\042\u0110\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //Clases, objetos, variables, lista, etc... en sintaxis java    
    //Creo una lista de tipo String llamada 'salidas', donde guardare cada uno de las salidas analizadas
    //Para el proyecto se sugiere HashMap
    public List<String> salidas = new ArrayList<String>();
    public Map<String, Double> mapaDouble = new HashMap<>();    
    public Map<String, String> mapaString = new HashMap<>();

public void mostrarIntGlobales(){
    for (Map.Entry<String, Double> entry : mapaDouble.entrySet()) {
        System.out.println("Variable global "+entry.getKey() + " vale " + entry.getValue());
        if(entry.getValue() == null){
            mapaDouble.put(entry.getKey(),0.0);
        }
    }
}

public void mostrarStringGlobales(){
    for (Map.Entry<String, String> entry : mapaString.entrySet()) {
        System.out.println("Variable global " + entry.getKey() + " vale " + entry.getValue());
        if(entry.getValue() == null){
            mapaString.put(entry.getKey(),entry.getKey());
        }
    }
}
    public String titulo = "titulo";
    public List<String> ejeX = new ArrayList<String>();
    public List<String> ejeY = new ArrayList<String>();
    public List<Double> valores = new ArrayList<>();
    public String tituloX = "tituloX";
    public String tituloY = "tituloY";

public void agregarValor(String a){
    try {   
           double decimal = Double.parseDouble(a);
           valores.add(decimal);
        }catch (Exception ex) {
            System.out.println("Error al recibir valor, se ingresara un 0");
            valores.add(0.0);
        }
}
public void agregarString(String a){
    try {   
           ejeX.add(a+"");
        }catch (Exception ex) {
            System.out.println("Error al recibir texto, se ingresara un 0");
           ejeX.add("texto");
        }
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= entradas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // entradas ::= PR_VOID PR_MAIN PARIZQ PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 String salida="def main() :{\n " + a + "\n} f__name__ = “__main__”: \nmain()";
                RESULT=salida; 
                salidas.add(salida);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entradas",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // entradas ::= archivo_json 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a; salidas.add(""+a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entradas",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a + "\n"+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencias ::= sentencias error 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= a + "\n #Error: "+b+"\n "+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencias ::= sentencia 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencias ::= expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // funciones ::= PR_VOID ID PARIZQ expresion PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="def "+ a +"("+b+"):{\n"+c+"\n}"; System.out.println("Debo retornar esto: def "+ a +"("+b+"):{\n"+c+"\n}");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // funciones ::= PR_VOID ID PARIZQ PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="def "+ a +"():{\n"+c+"\n}";  System.out.println("Debo retornar esto: def "+ a +"():{\n"+c+"\n}");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // funcion_globales ::= PR_VOID PR_DGLOBALES PARIZQ PARDER LLAVIZQ sentencias_globales LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT="def DefinirGlobales() :{\n " + a + "\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_globales",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencias_globales ::= sentencia_global sentencias_globales 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a + "\n"+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias_globales",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencias_globales ::= sentencia_global 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias_globales",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia_global ::= PR_STRING ID IGUAL STR PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="String "+a+" = "+b+ ";";  mapaString.put(a,b); mostrarStringGlobales();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_global",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencia_global ::= PR_STRING ID IGUAL referencia_json PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="String "+a+" = "+b+";"; mapaString.put(a,mapaString.get(b)); mostrarStringGlobales();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_global",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia_global ::= PR_DOUBLE ID IGUAL DECIMAL PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="Double "+a+" = "+b+";"; mapaDouble.put(a,Double.parseDouble(b)); mostrarIntGlobales();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_global",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia_global ::= PR_DOUBLE ID IGUAL referencia_json PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="Double "+a+" = "+b+";"; mapaDouble.put(a,mapaDouble.get(b)); mostrarIntGlobales();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_global",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // funcion_grafica ::= PR_VOID PR_GBARRAS PARIZQ PARDER LLAVIZQ sentencias_graficas LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT="def GraficaBarras() :{\n " + a + "\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_grafica",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // funcion_grafica ::= PR_VOID PR_GPIE PARIZQ PARDER LLAVIZQ sentencias_graficas LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT="def DefinirGlobales() :{\n " + a + "\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_grafica",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencias_graficas ::= sentencia_grafica sentencias_graficas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a + "\n"+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias_graficas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencias_graficas ::= sentencia_grafica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias_graficas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia_grafica ::= PR_STRING PR_TITULO IGUAL valor_string PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="String titulo = "+a+";"; titulo = a+""; System.out.println("Valor titulo: " + titulo) ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_grafica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia_grafica ::= PR_STRING PR_TITULOX IGUAL valor_string PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="String tituloX = "+a+";"; tituloX = a+"";System.out.println("Valor tituloX: " + tituloX) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_grafica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencia_grafica ::= PR_STRING PR_TITULOY IGUAL valor_string PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="String tituloY = "+a+";"; tituloY = a+"";System.out.println("Valor tituloY: " + tituloY) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_grafica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencia_grafica ::= PR_STRING CORIZQ CORDER PR_EJEX IGUAL LLAVIZQ elementos_string LLAVDER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT="String [] ejeX = {"+a+"}";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_grafica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia_grafica ::= PR_DOUBLE CORIZQ CORDER PR_VALORES IGUAL LLAVIZQ elementos_double LLAVDER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT="int [] valores = {"+a+"}";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_grafica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // elementos_double ::= valor_double 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a;  agregarValor(a+"");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos_double",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // elementos_double ::= elementos_double COMA elementos_double 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+","+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos_double",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // valor_double ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_double",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // valor_double ::= referencia_json 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=mapaDouble.get(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_double",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // valor_double ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=mapaDouble.get(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_double",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // elementos_string ::= valor_string 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; agregarString(a+"");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos_string",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // elementos_string ::= elementos_string COMA elementos_string 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+","+b+"";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos_string",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // valor_string ::= STR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_string",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // valor_string ::= referencia_json 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=mapaString.get(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_string",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // valor_string ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=mapaString.get(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_string",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentencia ::= sentencia_print 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencia ::= sentencia_declaracion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentencia ::= sentencia_globales 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentencia ::= sentenciaIf 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentencia ::= sentenciaFor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentencia ::= sentenciaSwitch 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sentencia ::= sentenciaWhile 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sentencia ::= sentenciaDoWhile 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sentencia ::= funcion_globales 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sentencia ::= funcion_grafica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sentencia ::= funciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sentenciaIf ::= PR_IF PARIZQ expresion PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT="if "+ a +":{\n" + b + "\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sentenciaIf ::= PR_IF PARIZQ expresion PARDER LLAVIZQ sentencias LLAVDER sentenciaElse 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT="if "+ a +":{\n" + b + "\n}"+c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sentenciaElse ::= PR_ELSE PR_IF PARIZQ expresion PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT="elif "+ a +":{\n" + b + "\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaElse",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sentenciaElse ::= PR_ELSE PR_IF PARIZQ expresion PARDER LLAVIZQ sentencias LLAVDER sentenciaElse 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT="elif "+ a +":{\n" + b + "\n}"+c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaElse",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sentenciaElse ::= PR_ELSE LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT="else :{\n" + b + "\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaElse",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sentenciaFor ::= PR_FOR PARIZQ tipo_dato ID IGUAL expresion PTCOMA ID MENORQUE ENTERO PTCOMA ID MAS MAS PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT="for"+ a +"in range(1,"+b+"):{\n"+c+"\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaFor",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sentenciaSwitch ::= PR_SWITCH PARIZQ ID PARDER LLAVIZQ sentenciasCase LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT="def switch(case, "+ a +"):{\n" + "switcher = { " + b + "\n}}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSwitch",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sentenciasCase ::= PR_CASE expresion DOSPUNTOS sentencias PR_BREAK PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= a+": " + b+ ", \n "; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasCase",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sentenciasCase ::= PR_CASE expresion DOSPUNTOS sentencias PR_BREAK PTCOMA sentenciasCase 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= a+": " + b+ ", \n " + c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasCase",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sentenciasCase ::= PR_DEFAULT sentencias PR_BREAK PTCOMA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT="4: " + b+ ","; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasCase",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sentenciaWhile ::= PR_WHILE PARIZQ expresion PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT="while "+ a +":{\n" + b + "\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sentenciaDoWhile ::= PR_DO LLAVIZQ sentencias LLAVDER PR_WHILE PARIZQ expresion PARDER PTCOMA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT="while True:{"+ b +"if ("+a+"):{ \n break \n}"+"\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhile",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sentencia_print ::= PR_CONSOLE PUNTO PR_WRITE PARIZQ expresion PARDER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		    
       System.out.println("Debo retornar esto: print(" + a +")" );
       //Inserto en la lista de salidas de la expresión evaluada
       //salidas.add("print(" + a + ")");
       RESULT="print(" + a + ")";
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_print",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sentencia_declaracion ::= tipo_dato ID IGUAL expresion PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=a+" "+b+" = "+c+";";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_declaracion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sentencia_declaracion ::= tipo_dato ID PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=a+" "+b+";";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_declaracion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sentencia_declaracion ::= tipo_dato CORIZQ CORDER ID IGUAL lista PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT= a +" [] "+b+ " = " +c+ ";" ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_declaracion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // lista ::= LLAVIZQ elementos LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="[" +a+ "]";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // elementos ::= expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=""+a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // elementos ::= elementos COMA elementos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= ""+a + "," + b+"";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // tipo_dato ::= PR_INT 
            {
              Object RESULT =null;
		RESULT="int";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // tipo_dato ::= PR_DOUBLE 
            {
              Object RESULT =null;
		RESULT="double";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // tipo_dato ::= PR_STRING 
            {
              Object RESULT =null;
		RESULT="string";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // tipo_dato ::= PR_BOOL 
            {
              Object RESULT =null;
		RESULT="bool";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // tipo_dato ::= PR_CHAR 
            {
              Object RESULT =null;
		RESULT="char";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion ::= expresion MAS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " + " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion ::= expresion POR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " * " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion ::= expresion MENOS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " - " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion ::= expresion UMENOS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " - " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion ::= expresion DIVIDIDO expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " / " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion ::= expresion MAYORQUE expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " > " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion ::= expresion MENORQUE expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " < " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion ::= expresion MAYOROIGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " >= " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion ::= expresion MENOROIGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " <= " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresion ::= expresion EQUALS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " == " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresion ::= expresion DISTINTO expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " != " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion ::= expresion AND expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " and " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresion ::= expresion OR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " or " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresion ::= NOT expresion 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = " not " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresion ::= PARIZQ expresion PARDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="("+a+")";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresion ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion ::= STR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion ::= CHAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresion ::= BOOLEANO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresion ::= referencia_json 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // referencia_json ::= DOLLAR LLAVIZQ PR_NEWVALOR COMA STR COMA STR LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=/*"${NewValor,"+ a + "," +*/ b /*+"}"*/ ; System.out.println("${NewValor,"+ a + "," + b+"}");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("referencia_json",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // archivo_json ::= LLAVIZQ miembro LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="{"+a+"}";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("archivo_json",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // miembro ::= STR DOSPUNTOS STR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " equals " + b;  System.out.println(a +"  vale "+ b); 
                                            mapaString.put(a,b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembro",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // miembro ::= STR DOSPUNTOS DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " equals " + b;  System.out.println(a +"  vale "+ b); 
                                          mapaDouble.put(a,Double.parseDouble(b));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembro",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // miembro ::= miembro COMA miembro 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+",\n"+b+"\n";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembro",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
