
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\004\000\002\002\003\000\002\003" +
    "\011\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\003\000\002\004\003\000\002\006\012\000" +
    "\002\006\011\000\002\010\011\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\014\011\000" +
    "\002\014\012\000\002\015\012\000\002\015\013\000\002" +
    "\015\006\000\002\020\024\000\002\016\011\000\002\017" +
    "\010\000\002\017\011\000\002\017\006\000\002\022\011" +
    "\000\002\021\013\000\002\011\011\000\002\012\007\000" +
    "\002\012\005\000\002\012\011\000\002\025\005\000\002" +
    "\026\003\000\002\026\005\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\004" +
    "\000\002\023\005\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\027\012\000\002\030\005\000\002\031" +
    "\005\000\002\031\005\000\002\031\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\006\010\005\043\010\001\002\000\004\002" +
    "\000\001\002\000\004\041\302\001\002\000\004\002\301" +
    "\001\002\000\004\002\ufffe\001\002\000\004\044\011\001" +
    "\002\000\004\005\012\001\002\000\004\006\013\001\002" +
    "\000\004\010\014\001\002\000\050\005\025\017\020\034" +
    "\024\035\053\036\021\037\033\040\035\041\047\043\051" +
    "\046\042\047\052\050\050\051\045\052\056\055\036\057" +
    "\026\060\044\064\054\065\043\001\002\000\036\003\ufff5" +
    "\007\ufff5\043\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5\052" +
    "\ufff5\055\ufff5\057\ufff5\060\ufff5\063\ufff5\064\ufff5\065\ufff5" +
    "\001\002\000\036\003\uffee\007\uffee\043\uffee\046\uffee\047" +
    "\uffee\050\uffee\051\uffee\052\uffee\055\uffee\057\uffee\060\uffee" +
    "\063\uffee\064\uffee\065\uffee\001\002\000\034\003\126\007" +
    "\300\043\051\046\042\047\052\050\050\051\045\052\056" +
    "\055\036\057\026\060\044\064\054\065\043\001\002\000" +
    "\004\010\271\001\002\000\100\003\uffc5\004\uffc5\006\uffc5" +
    "\007\uffc5\015\uffc5\016\uffc5\020\uffc5\021\uffc5\022\uffc5\023" +
    "\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5" +
    "\032\uffc5\033\uffc5\042\uffc5\043\uffc5\046\uffc5\047\uffc5\050" +
    "\uffc5\051\uffc5\052\uffc5\055\uffc5\057\uffc5\060\uffc5\063\uffc5" +
    "\064\uffc5\065\uffc5\001\002\000\036\003\ufff2\007\ufff2\043" +
    "\ufff2\046\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2\055\ufff2" +
    "\057\ufff2\060\ufff2\063\ufff2\064\ufff2\065\ufff2\001\002\000" +
    "\070\003\ufffa\007\ufffa\020\074\021\065\022\070\023\072" +
    "\024\071\025\073\026\077\027\066\030\064\031\075\032" +
    "\063\033\100\042\067\043\ufffa\046\ufffa\047\ufffa\050\ufffa" +
    "\051\ufffa\052\ufffa\055\ufffa\057\ufffa\060\ufffa\063\ufffa\064" +
    "\ufffa\065\ufffa\001\002\000\022\005\025\017\020\034\024" +
    "\035\053\036\021\037\033\040\035\041\047\001\002\000" +
    "\022\005\025\017\020\034\024\035\053\036\021\037\033" +
    "\040\035\041\047\001\002\000\004\005\245\001\002\000" +
    "\036\003\ufff6\007\ufff6\043\ufff6\046\ufff6\047\ufff6\050\ufff6" +
    "\051\ufff6\052\ufff6\055\ufff6\057\ufff6\060\ufff6\063\ufff6\064" +
    "\ufff6\065\ufff6\001\002\000\036\003\ufff0\007\ufff0\043\ufff0" +
    "\046\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\055\ufff0\057" +
    "\ufff0\060\ufff0\063\ufff0\064\ufff0\065\ufff0\001\002\000\036" +
    "\003\ufff1\007\ufff1\043\ufff1\046\ufff1\047\ufff1\050\ufff1\051" +
    "\ufff1\052\ufff1\055\ufff1\057\ufff1\060\ufff1\063\ufff1\064\ufff1" +
    "\065\ufff1\001\002\000\100\003\uffc1\004\uffc1\006\uffc1\007" +
    "\uffc1\015\uffc1\016\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1" +
    "\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032" +
    "\uffc1\033\uffc1\042\uffc1\043\uffc1\046\uffc1\047\uffc1\050\uffc1" +
    "\051\uffc1\052\uffc1\055\uffc1\057\uffc1\060\uffc1\063\uffc1\064" +
    "\uffc1\065\uffc1\001\002\000\100\003\uffc2\004\uffc2\006\uffc2" +
    "\007\uffc2\015\uffc2\016\uffc2\020\uffc2\021\uffc2\022\uffc2\023" +
    "\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2" +
    "\032\uffc2\033\uffc2\042\uffc2\043\uffc2\046\uffc2\047\uffc2\050" +
    "\uffc2\051\uffc2\052\uffc2\055\uffc2\057\uffc2\060\uffc2\063\uffc2" +
    "\064\uffc2\065\uffc2\001\002\000\006\012\224\040\225\001" +
    "\002\000\100\003\uffc4\004\uffc4\006\uffc4\007\uffc4\015\uffc4" +
    "\016\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025" +
    "\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4" +
    "\042\uffc4\043\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052" +
    "\uffc4\055\uffc4\057\uffc4\060\uffc4\063\uffc4\064\uffc4\065\uffc4" +
    "\001\002\000\004\005\201\001\002\000\036\003\uffed\007" +
    "\uffed\043\uffed\046\uffed\047\uffed\050\uffed\051\uffed\052\uffed" +
    "\055\uffed\057\uffed\060\uffed\063\uffed\064\uffed\065\uffed\001" +
    "\002\000\036\003\ufffb\007\ufffb\043\ufffb\046\ufffb\047\ufffb" +
    "\050\ufffb\051\ufffb\052\ufffb\055\ufffb\057\ufffb\060\ufffb\063" +
    "\ufffb\064\ufffb\065\ufffb\001\002\000\036\003\ufff4\007\ufff4" +
    "\043\ufff4\046\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4\055" +
    "\ufff4\057\ufff4\060\ufff4\063\ufff4\064\ufff4\065\ufff4\001\002" +
    "\000\006\012\uffd9\040\uffd9\001\002\000\004\010\171\001" +
    "\002\000\004\005\150\001\002\000\006\012\uffd6\040\uffd6" +
    "\001\002\000\036\003\ufff3\007\ufff3\043\ufff3\046\ufff3\047" +
    "\ufff3\050\ufff3\051\ufff3\052\ufff3\055\ufff3\057\ufff3\060\ufff3" +
    "\063\ufff3\064\ufff3\065\ufff3\001\002\000\100\003\uffc3\004" +
    "\uffc3\006\uffc3\007\uffc3\015\uffc3\016\uffc3\020\uffc3\021\uffc3" +
    "\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030" +
    "\uffc3\031\uffc3\032\uffc3\033\uffc3\042\uffc3\043\uffc3\046\uffc3" +
    "\047\uffc3\050\uffc3\051\uffc3\052\uffc3\055\uffc3\057\uffc3\060" +
    "\uffc3\063\uffc3\064\uffc3\065\uffc3\001\002\000\006\012\uffd8" +
    "\040\uffd8\001\002\000\006\040\127\045\130\001\002\000" +
    "\006\012\uffd7\040\uffd7\001\002\000\100\003\uffc6\004\uffc6" +
    "\006\uffc6\007\uffc6\015\uffc6\016\uffc6\020\uffc6\021\uffc6\022" +
    "\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6" +
    "\031\uffc6\032\uffc6\033\uffc6\042\uffc6\043\uffc6\046\uffc6\047" +
    "\uffc6\050\uffc6\051\uffc6\052\uffc6\055\uffc6\057\uffc6\060\uffc6" +
    "\063\uffc6\064\uffc6\065\uffc6\001\002\000\004\005\117\001" +
    "\002\000\036\003\uffef\007\uffef\043\uffef\046\uffef\047\uffef" +
    "\050\uffef\051\uffef\052\uffef\055\uffef\057\uffef\060\uffef\063" +
    "\uffef\064\uffef\065\uffef\001\002\000\004\014\057\001\002" +
    "\000\004\053\060\001\002\000\004\005\061\001\002\000" +
    "\022\005\025\017\020\034\024\035\053\036\021\037\033" +
    "\040\035\041\047\001\002\000\036\006\076\020\074\021" +
    "\065\022\070\023\072\024\071\025\073\026\077\027\066" +
    "\030\064\031\075\032\063\033\100\042\067\001\002\000" +
    "\022\005\025\017\020\034\024\035\053\036\021\037\033" +
    "\040\035\041\047\001\002\000\022\005\025\017\020\034" +
    "\024\035\053\036\021\037\033\040\035\041\047\001\002" +
    "\000\022\005\025\017\020\034\024\035\053\036\021\037" +
    "\033\040\035\041\047\001\002\000\022\005\025\017\020" +
    "\034\024\035\053\036\021\037\033\040\035\041\047\001" +
    "\002\000\022\005\025\017\020\034\024\035\053\036\021" +
    "\037\033\040\035\041\047\001\002\000\022\005\025\017" +
    "\020\034\024\035\053\036\021\037\033\040\035\041\047" +
    "\001\002\000\022\005\025\017\020\034\024\035\053\036" +
    "\021\037\033\040\035\041\047\001\002\000\022\005\025" +
    "\017\020\034\024\035\053\036\021\037\033\040\035\041" +
    "\047\001\002\000\022\005\025\017\020\034\024\035\053" +
    "\036\021\037\033\040\035\041\047\001\002\000\022\005" +
    "\025\017\020\034\024\035\053\036\021\037\033\040\035" +
    "\041\047\001\002\000\022\005\025\017\020\034\024\035" +
    "\053\036\021\037\033\040\035\041\047\001\002\000\004" +
    "\004\103\001\002\000\022\005\025\017\020\034\024\035" +
    "\053\036\021\037\033\040\035\041\047\001\002\000\022" +
    "\005\025\017\020\034\024\035\053\036\021\037\033\040" +
    "\035\041\047\001\002\000\100\003\uffc9\004\uffc9\006\uffc9" +
    "\007\uffc9\015\uffc9\016\uffc9\020\uffc9\021\uffc9\022\uffc9\023" +
    "\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9" +
    "\032\uffc9\033\uffc9\042\067\043\uffc9\046\uffc9\047\uffc9\050" +
    "\uffc9\051\uffc9\052\uffc9\055\uffc9\057\uffc9\060\uffc9\063\uffc9" +
    "\064\uffc9\065\uffc9\001\002\000\100\003\uffcc\004\uffcc\006" +
    "\uffcc\007\uffcc\015\uffcc\016\uffcc\020\uffcc\021\uffcc\022\uffcc" +
    "\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031" +
    "\uffcc\032\063\033\100\042\067\043\uffcc\046\uffcc\047\uffcc" +
    "\050\uffcc\051\uffcc\052\uffcc\055\uffcc\057\uffcc\060\uffcc\063" +
    "\uffcc\064\uffcc\065\uffcc\001\002\000\036\003\uffe0\007\uffe0" +
    "\043\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\055" +
    "\uffe0\057\uffe0\060\uffe0\063\uffe0\064\uffe0\065\uffe0\001\002" +
    "\000\100\003\uffcb\004\uffcb\006\uffcb\007\uffcb\015\uffcb\016" +
    "\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb" +
    "\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\063\033\100\042" +
    "\067\043\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb" +
    "\055\uffcb\057\uffcb\060\uffcb\063\uffcb\064\uffcb\065\uffcb\001" +
    "\002\000\100\003\uffd5\004\uffd5\006\uffd5\007\uffd5\015\uffd5" +
    "\016\uffd5\020\uffd5\021\uffd5\022\070\023\072\024\071\025" +
    "\073\026\077\027\066\030\064\031\075\032\063\033\100" +
    "\042\067\043\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052" +
    "\uffd5\055\uffd5\057\uffd5\060\uffd5\063\uffd5\064\uffd5\065\uffd5" +
    "\001\002\000\100\003\uffd0\004\uffd0\006\uffd0\007\uffd0\015" +
    "\uffd0\016\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0" +
    "\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\063\033" +
    "\100\042\067\043\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0" +
    "\052\uffd0\055\uffd0\057\uffd0\060\uffd0\063\uffd0\064\uffd0\065" +
    "\uffd0\001\002\000\100\003\uffd1\004\uffd1\006\uffd1\007\uffd1" +
    "\015\uffd1\016\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024" +
    "\071\025\073\026\077\027\066\030\064\031\075\032\063" +
    "\033\100\042\067\043\uffd1\046\uffd1\047\uffd1\050\uffd1\051" +
    "\uffd1\052\uffd1\055\uffd1\057\uffd1\060\uffd1\063\uffd1\064\uffd1" +
    "\065\uffd1\001\002\000\100\003\uffcf\004\uffcf\006\uffcf\007" +
    "\uffcf\015\uffcf\016\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf" +
    "\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032" +
    "\063\033\100\042\067\043\uffcf\046\uffcf\047\uffcf\050\uffcf" +
    "\051\uffcf\052\uffcf\055\uffcf\057\uffcf\060\uffcf\063\uffcf\064" +
    "\uffcf\065\uffcf\001\002\000\100\003\uffd4\004\uffd4\006\uffd4" +
    "\007\uffd4\015\uffd4\016\uffd4\020\uffd4\021\uffd4\022\uffd4\023" +
    "\uffd4\024\071\025\073\026\077\027\066\030\064\031\075" +
    "\032\063\033\100\042\067\043\uffd4\046\uffd4\047\uffd4\050" +
    "\uffd4\051\uffd4\052\uffd4\055\uffd4\057\uffd4\060\uffd4\063\uffd4" +
    "\064\uffd4\065\uffd4\001\002\000\100\003\uffd2\004\uffd2\006" +
    "\uffd2\007\uffd2\015\uffd2\016\uffd2\020\uffd2\021\uffd2\022\uffd2" +
    "\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031" +
    "\uffd2\032\uffd2\033\uffd2\042\067\043\uffd2\046\uffd2\047\uffd2" +
    "\050\uffd2\051\uffd2\052\uffd2\055\uffd2\057\uffd2\060\uffd2\063" +
    "\uffd2\064\uffd2\065\uffd2\001\002\000\100\003\uffce\004\uffce" +
    "\006\uffce\007\uffce\015\uffce\016\uffce\020\uffce\021\uffce\022" +
    "\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce" +
    "\031\uffce\032\063\033\100\042\067\043\uffce\046\uffce\047" +
    "\uffce\050\uffce\051\uffce\052\uffce\055\uffce\057\uffce\060\uffce" +
    "\063\uffce\064\uffce\065\uffce\001\002\000\100\003\uffd3\004" +
    "\uffd3\006\uffd3\007\uffd3\015\uffd3\016\uffd3\020\uffd3\021\uffd3" +
    "\022\070\023\072\024\071\025\073\026\077\027\066\030" +
    "\064\031\075\032\063\033\100\042\067\043\uffd3\046\uffd3" +
    "\047\uffd3\050\uffd3\051\uffd3\052\uffd3\055\uffd3\057\uffd3\060" +
    "\uffd3\063\uffd3\064\uffd3\065\uffd3\001\002\000\100\003\uffcd" +
    "\004\uffcd\006\uffcd\007\uffcd\015\uffcd\016\uffcd\020\uffcd\021" +
    "\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd" +
    "\030\uffcd\031\uffcd\032\063\033\100\042\067\043\uffcd\046" +
    "\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\055\uffcd\057\uffcd" +
    "\060\uffcd\063\uffcd\064\uffcd\065\uffcd\001\002\000\100\003" +
    "\uffca\004\uffca\006\uffca\007\uffca\015\uffca\016\uffca\020\uffca" +
    "\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027" +
    "\uffca\030\uffca\031\uffca\032\uffca\033\uffca\042\067\043\uffca" +
    "\046\uffca\047\uffca\050\uffca\051\uffca\052\uffca\055\uffca\057" +
    "\uffca\060\uffca\063\uffca\064\uffca\065\uffca\001\002\000\022" +
    "\005\025\017\020\034\024\035\053\036\021\037\033\040" +
    "\035\041\047\001\002\000\036\006\121\020\074\021\065" +
    "\022\070\023\072\024\071\025\073\026\077\027\066\030" +
    "\064\031\075\032\063\033\100\042\067\001\002\000\004" +
    "\010\122\001\002\000\050\005\025\017\020\034\024\035" +
    "\053\036\021\037\033\040\035\041\047\043\051\046\042" +
    "\047\052\050\050\051\045\052\056\055\036\057\026\060" +
    "\044\064\054\065\043\001\002\000\034\003\126\007\124" +
    "\043\051\046\042\047\052\050\050\051\045\052\056\055" +
    "\036\057\026\060\044\064\054\065\043\001\002\000\036" +
    "\003\uffe2\007\uffe2\043\uffe2\046\uffe2\047\uffe2\050\uffe2\051" +
    "\uffe2\052\uffe2\055\uffe2\057\uffe2\060\uffe2\063\uffe2\064\uffe2" +
    "\065\uffe2\001\002\000\036\003\ufffd\007\ufffd\043\ufffd\046" +
    "\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\055\ufffd\057\ufffd" +
    "\060\ufffd\063\ufffd\064\ufffd\065\ufffd\001\002\000\036\003" +
    "\ufffc\007\ufffc\043\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc" +
    "\052\ufffc\055\ufffc\057\ufffc\060\ufffc\063\ufffc\064\ufffc\065" +
    "\ufffc\001\002\000\004\005\136\001\002\000\004\005\131" +
    "\001\002\000\004\006\132\001\002\000\004\010\133\001" +
    "\002\000\050\005\025\017\020\034\024\035\053\036\021" +
    "\037\033\040\035\041\047\043\051\046\042\047\052\050" +
    "\050\051\045\052\056\055\036\057\026\060\044\064\054" +
    "\065\043\001\002\000\034\003\126\007\135\043\051\046" +
    "\042\047\052\050\050\051\045\052\056\055\036\057\026" +
    "\060\044\064\054\065\043\001\002\000\036\003\ufff7\007" +
    "\ufff7\043\ufff7\046\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7" +
    "\055\ufff7\057\ufff7\060\ufff7\063\ufff7\064\ufff7\065\ufff7\001" +
    "\002\000\024\005\025\006\140\017\020\034\024\035\053" +
    "\036\021\037\033\040\035\041\047\001\002\000\036\006" +
    "\144\020\074\021\065\022\070\023\072\024\071\025\073" +
    "\026\077\027\066\030\064\031\075\032\063\033\100\042" +
    "\067\001\002\000\004\010\141\001\002\000\050\005\025" +
    "\017\020\034\024\035\053\036\021\037\033\040\035\041" +
    "\047\043\051\046\042\047\052\050\050\051\045\052\056" +
    "\055\036\057\026\060\044\064\054\065\043\001\002\000" +
    "\034\003\126\007\143\043\051\046\042\047\052\050\050" +
    "\051\045\052\056\055\036\057\026\060\044\064\054\065" +
    "\043\001\002\000\036\003\ufff8\007\ufff8\043\ufff8\046\ufff8" +
    "\047\ufff8\050\ufff8\051\ufff8\052\ufff8\055\ufff8\057\ufff8\060" +
    "\ufff8\063\ufff8\064\ufff8\065\ufff8\001\002\000\004\010\145" +
    "\001\002\000\050\005\025\017\020\034\024\035\053\036" +
    "\021\037\033\040\035\041\047\043\051\046\042\047\052" +
    "\050\050\051\045\052\056\055\036\057\026\060\044\064" +
    "\054\065\043\001\002\000\034\003\126\007\147\043\051" +
    "\046\042\047\052\050\050\051\045\052\056\055\036\057" +
    "\026\060\044\064\054\065\043\001\002\000\036\003\ufff9" +
    "\007\ufff9\043\ufff9\046\ufff9\047\ufff9\050\ufff9\051\ufff9\052" +
    "\ufff9\055\ufff9\057\ufff9\060\ufff9\063\ufff9\064\ufff9\065\ufff9" +
    "\001\002\000\004\040\151\001\002\000\004\006\152\001" +
    "\002\000\004\010\153\001\002\000\006\061\156\062\155" +
    "\001\002\000\004\007\170\001\002\000\050\005\025\017" +
    "\020\034\024\035\053\036\021\037\033\040\035\041\047" +
    "\043\051\046\042\047\052\050\050\051\045\052\056\055" +
    "\036\057\026\060\044\064\054\065\043\001\002\000\022" +
    "\005\025\017\020\034\024\035\053\036\021\037\033\040" +
    "\035\041\047\001\002\000\036\016\160\020\074\021\065" +
    "\022\070\023\072\024\071\025\073\026\077\027\066\030" +
    "\064\031\075\032\063\033\100\042\067\001\002\000\050" +
    "\005\025\017\020\034\024\035\053\036\021\037\033\040" +
    "\035\041\047\043\051\046\042\047\052\050\050\051\045" +
    "\052\056\055\036\057\026\060\044\064\054\065\043\001" +
    "\002\000\034\003\126\043\051\046\042\047\052\050\050" +
    "\051\045\052\056\055\036\057\026\060\044\063\162\064" +
    "\054\065\043\001\002\000\004\004\163\001\002\000\010" +
    "\007\uffe5\061\156\062\155\001\002\000\004\007\uffe4\001" +
    "\002\000\034\003\126\043\051\046\042\047\052\050\050" +
    "\051\045\052\056\055\036\057\026\060\044\063\166\064" +
    "\054\065\043\001\002\000\004\004\167\001\002\000\004" +
    "\007\uffe3\001\002\000\036\003\uffe6\007\uffe6\043\uffe6\046" +
    "\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\055\uffe6\057\uffe6" +
    "\060\uffe6\063\uffe6\064\uffe6\065\uffe6\001\002\000\050\005" +
    "\025\017\020\034\024\035\053\036\021\037\033\040\035" +
    "\041\047\043\051\046\042\047\052\050\050\051\045\052" +
    "\056\055\036\057\026\060\044\064\054\065\043\001\002" +
    "\000\034\003\126\007\173\043\051\046\042\047\052\050" +
    "\050\051\045\052\056\055\036\057\026\060\044\064\054" +
    "\065\043\001\002\000\004\064\174\001\002\000\004\005" +
    "\175\001\002\000\022\005\025\017\020\034\024\035\053" +
    "\036\021\037\033\040\035\041\047\001\002\000\036\006" +
    "\177\020\074\021\065\022\070\023\072\024\071\025\073" +
    "\026\077\027\066\030\064\031\075\032\063\033\100\042" +
    "\067\001\002\000\004\004\200\001\002\000\036\003\uffe1" +
    "\007\uffe1\043\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1\052" +
    "\uffe1\055\uffe1\057\uffe1\060\uffe1\063\uffe1\064\uffe1\065\uffe1" +
    "\001\002\000\022\005\025\017\020\034\024\035\053\036" +
    "\021\037\033\040\035\041\047\001\002\000\036\006\203" +
    "\020\074\021\065\022\070\023\072\024\071\025\073\026" +
    "\077\027\066\030\064\031\075\032\063\033\100\042\067" +
    "\001\002\000\004\010\204\001\002\000\050\005\025\017" +
    "\020\034\024\035\053\036\021\037\033\040\035\041\047" +
    "\043\051\046\042\047\052\050\050\051\045\052\056\055" +
    "\036\057\026\060\044\064\054\065\043\001\002\000\034" +
    "\003\126\007\206\043\051\046\042\047\052\050\050\051" +
    "\045\052\056\055\036\057\026\060\044\064\054\065\043" +
    "\001\002\000\040\003\uffec\007\uffec\043\uffec\046\uffec\047" +
    "\uffec\050\uffec\051\uffec\052\uffec\055\uffec\056\207\057\uffec" +
    "\060\uffec\063\uffec\064\uffec\065\uffec\001\002\000\006\010" +
    "\211\055\212\001\002\000\036\003\uffeb\007\uffeb\043\uffeb" +
    "\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\055\uffeb\057" +
    "\uffeb\060\uffeb\063\uffeb\064\uffeb\065\uffeb\001\002\000\050" +
    "\005\025\017\020\034\024\035\053\036\021\037\033\040" +
    "\035\041\047\043\051\046\042\047\052\050\050\051\045" +
    "\052\056\055\036\057\026\060\044\064\054\065\043\001" +
    "\002\000\004\005\213\001\002\000\022\005\025\017\020" +
    "\034\024\035\053\036\021\037\033\040\035\041\047\001" +
    "\002\000\036\006\215\020\074\021\065\022\070\023\072" +
    "\024\071\025\073\026\077\027\066\030\064\031\075\032" +
    "\063\033\100\042\067\001\002\000\004\010\216\001\002" +
    "\000\050\005\025\017\020\034\024\035\053\036\021\037" +
    "\033\040\035\041\047\043\051\046\042\047\052\050\050" +
    "\051\045\052\056\055\036\057\026\060\044\064\054\065" +
    "\043\001\002\000\034\003\126\007\220\043\051\046\042" +
    "\047\052\050\050\051\045\052\056\055\036\057\026\060" +
    "\044\064\054\065\043\001\002\000\040\003\uffea\007\uffea" +
    "\043\uffea\046\uffea\047\uffea\050\uffea\051\uffea\052\uffea\055" +
    "\uffea\056\207\057\uffea\060\uffea\063\uffea\064\uffea\065\uffea" +
    "\001\002\000\036\003\uffe9\007\uffe9\043\uffe9\046\uffe9\047" +
    "\uffe9\050\uffe9\051\uffe9\052\uffe9\055\uffe9\057\uffe9\060\uffe9" +
    "\063\uffe9\064\uffe9\065\uffe9\001\002\000\034\003\126\007" +
    "\223\043\051\046\042\047\052\050\050\051\045\052\056" +
    "\055\036\057\026\060\044\064\054\065\043\001\002\000" +
    "\036\003\uffe8\007\uffe8\043\uffe8\046\uffe8\047\uffe8\050\uffe8" +
    "\051\uffe8\052\uffe8\055\uffe8\057\uffe8\060\uffe8\063\uffe8\064" +
    "\uffe8\065\uffe8\001\002\000\004\011\232\001\002\000\006" +
    "\004\227\013\226\001\002\000\022\005\025\017\020\034" +
    "\024\035\053\036\021\037\033\040\035\041\047\001\002" +
    "\000\036\003\uffde\007\uffde\043\uffde\046\uffde\047\uffde\050" +
    "\uffde\051\uffde\052\uffde\055\uffde\057\uffde\060\uffde\063\uffde" +
    "\064\uffde\065\uffde\001\002\000\036\004\231\020\074\021" +
    "\065\022\070\023\072\024\071\025\073\026\077\027\066" +
    "\030\064\031\075\032\063\033\100\042\067\001\002\000" +
    "\036\003\uffdf\007\uffdf\043\uffdf\046\uffdf\047\uffdf\050\uffdf" +
    "\051\uffdf\052\uffdf\055\uffdf\057\uffdf\060\uffdf\063\uffdf\064" +
    "\uffdf\065\uffdf\001\002\000\004\040\233\001\002\000\004" +
    "\013\234\001\002\000\004\010\235\001\002\000\022\005" +
    "\025\017\020\034\024\035\053\036\021\037\033\040\035" +
    "\041\047\001\002\000\004\004\237\001\002\000\036\003" +
    "\uffdd\007\uffdd\043\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd" +
    "\052\uffdd\055\uffdd\057\uffdd\060\uffdd\063\uffdd\064\uffdd\065" +
    "\uffdd\001\002\000\006\007\243\015\242\001\002\000\040" +
    "\007\uffdb\015\uffdb\020\074\021\065\022\070\023\072\024" +
    "\071\025\073\026\077\027\066\030\064\031\075\032\063" +
    "\033\100\042\067\001\002\000\022\005\025\017\020\034" +
    "\024\035\053\036\021\037\033\040\035\041\047\001\002" +
    "\000\004\004\uffdc\001\002\000\006\007\uffda\015\uffda\001" +
    "\002\000\012\046\042\047\052\050\050\051\045\001\002" +
    "\000\004\040\247\001\002\000\004\013\250\001\002\000" +
    "\022\005\025\017\020\034\024\035\053\036\021\037\033" +
    "\040\035\041\047\001\002\000\036\004\252\020\074\021" +
    "\065\022\070\023\072\024\071\025\073\026\077\027\066" +
    "\030\064\031\075\032\063\033\100\042\067\001\002\000" +
    "\004\040\253\001\002\000\004\024\254\001\002\000\004" +
    "\035\255\001\002\000\004\004\256\001\002\000\004\040" +
    "\257\001\002\000\004\020\260\001\002\000\004\020\261" +
    "\001\002\000\004\006\262\001\002\000\004\010\263\001" +
    "\002\000\050\005\025\017\020\034\024\035\053\036\021" +
    "\037\033\040\035\041\047\043\051\046\042\047\052\050" +
    "\050\051\045\052\056\055\036\057\026\060\044\064\054" +
    "\065\043\001\002\000\034\003\126\007\265\043\051\046" +
    "\042\047\052\050\050\051\045\052\056\055\036\057\026" +
    "\060\044\064\054\065\043\001\002\000\036\003\uffe7\007" +
    "\uffe7\043\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7" +
    "\055\uffe7\057\uffe7\060\uffe7\063\uffe7\064\uffe7\065\uffe7\001" +
    "\002\000\036\006\267\020\074\021\065\022\070\023\072" +
    "\024\071\025\073\026\077\027\066\030\064\031\075\032" +
    "\063\033\100\042\067\001\002\000\100\003\uffc7\004\uffc7" +
    "\006\uffc7\007\uffc7\015\uffc7\016\uffc7\020\uffc7\021\uffc7\022" +
    "\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7" +
    "\031\uffc7\032\uffc7\033\uffc7\042\uffc7\043\uffc7\046\uffc7\047" +
    "\uffc7\050\uffc7\051\uffc7\052\uffc7\055\uffc7\057\uffc7\060\uffc7" +
    "\063\uffc7\064\uffc7\065\uffc7\001\002\000\100\003\uffc8\004" +
    "\uffc8\006\uffc8\007\uffc8\015\uffc8\016\uffc8\020\074\021\065" +
    "\022\070\023\072\024\071\025\073\026\077\027\066\030" +
    "\064\031\075\032\063\033\100\042\067\043\uffc8\046\uffc8" +
    "\047\uffc8\050\uffc8\051\uffc8\052\uffc8\055\uffc8\057\uffc8\060" +
    "\uffc8\063\uffc8\064\uffc8\065\uffc8\001\002\000\004\054\272" +
    "\001\002\000\004\015\273\001\002\000\004\041\274\001" +
    "\002\000\004\015\275\001\002\000\004\041\276\001\002" +
    "\000\004\007\277\001\002\000\100\003\uffc0\004\uffc0\006" +
    "\uffc0\007\uffc0\015\uffc0\016\uffc0\020\uffc0\021\uffc0\022\uffc0" +
    "\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031" +
    "\uffc0\032\uffc0\033\uffc0\042\uffc0\043\uffc0\046\uffc0\047\uffc0" +
    "\050\uffc0\051\uffc0\052\uffc0\055\uffc0\057\uffc0\060\uffc0\063" +
    "\uffc0\064\uffc0\065\uffc0\001\002\000\004\002\uffff\001\002" +
    "\000\004\002\001\001\002\000\004\016\307\001\002\000" +
    "\006\007\305\015\304\001\002\000\004\041\302\001\002" +
    "\000\004\002\uffbf\001\002\000\006\007\uffbc\015\uffbc\001" +
    "\002\000\006\036\311\041\310\001\002\000\006\007\uffbe" +
    "\015\uffbe\001\002\000\006\007\uffbd\015\uffbd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\010\002\005\003\003\030\006\001\001\000" +
    "\002\001\001\000\004\031\302\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\004\016\005\037" +
    "\006\015\010\036\011\026\012\014\013\040\014\045\016" +
    "\030\020\021\021\054\022\027\023\022\024\033\027\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\005" +
    "\124\006\015\010\036\011\026\012\014\013\040\014\045" +
    "\016\030\020\021\021\054\022\027\024\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\267\027\031\001\001\000\006\023" +
    "\265\027\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\061" +
    "\027\031\001\001\000\002\001\001\000\006\023\115\027" +
    "\031\001\001\000\006\023\114\027\031\001\001\000\006" +
    "\023\113\027\031\001\001\000\006\023\112\027\031\001" +
    "\001\000\006\023\111\027\031\001\001\000\006\023\110" +
    "\027\031\001\001\000\006\023\107\027\031\001\001\000" +
    "\006\023\106\027\031\001\001\000\006\023\105\027\031" +
    "\001\001\000\006\023\104\027\031\001\001\000\006\023" +
    "\103\027\031\001\001\000\002\001\001\000\006\023\101" +
    "\027\031\001\001\000\006\023\100\027\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\117\027\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\004\122\005\037\006" +
    "\015\010\036\011\026\012\014\013\040\014\045\016\030" +
    "\020\021\021\054\022\027\023\022\024\033\027\031\001" +
    "\001\000\032\005\124\006\015\010\036\011\026\012\014" +
    "\013\040\014\045\016\030\020\021\021\054\022\027\024" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\004\133\005\037\006\015" +
    "\010\036\011\026\012\014\013\040\014\045\016\030\020" +
    "\021\021\054\022\027\023\022\024\033\027\031\001\001" +
    "\000\032\005\124\006\015\010\036\011\026\012\014\013" +
    "\040\014\045\016\030\020\021\021\054\022\027\024\033" +
    "\001\001\000\002\001\001\000\006\023\136\027\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\004\141" +
    "\005\037\006\015\010\036\011\026\012\014\013\040\014" +
    "\045\016\030\020\021\021\054\022\027\023\022\024\033" +
    "\027\031\001\001\000\032\005\124\006\015\010\036\011" +
    "\026\012\014\013\040\014\045\016\030\020\021\021\054" +
    "\022\027\024\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\004\145\005\037\006\015\010\036\011\026" +
    "\012\014\013\040\014\045\016\030\020\021\021\054\022" +
    "\027\023\022\024\033\027\031\001\001\000\032\005\124" +
    "\006\015\010\036\011\026\012\014\013\040\014\045\016" +
    "\030\020\021\021\054\022\027\024\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\153\001\001\000\002\001\001\000\040" +
    "\004\164\005\037\006\015\010\036\011\026\012\014\013" +
    "\040\014\045\016\030\020\021\021\054\022\027\023\022" +
    "\024\033\027\031\001\001\000\006\023\156\027\031\001" +
    "\001\000\002\001\001\000\040\004\160\005\037\006\015" +
    "\010\036\011\026\012\014\013\040\014\045\016\030\020" +
    "\021\021\054\022\027\023\022\024\033\027\031\001\001" +
    "\000\032\005\124\006\015\010\036\011\026\012\014\013" +
    "\040\014\045\016\030\020\021\021\054\022\027\024\033" +
    "\001\001\000\002\001\001\000\004\017\163\001\001\000" +
    "\002\001\001\000\032\005\124\006\015\010\036\011\026" +
    "\012\014\013\040\014\045\016\030\020\021\021\054\022" +
    "\027\024\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\004\171\005\037\006\015\010" +
    "\036\011\026\012\014\013\040\014\045\016\030\020\021" +
    "\021\054\022\027\023\022\024\033\027\031\001\001\000" +
    "\032\005\124\006\015\010\036\011\026\012\014\013\040" +
    "\014\045\016\030\020\021\021\054\022\027\024\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\175" +
    "\027\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\201\027\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\004\204\005\037\006" +
    "\015\010\036\011\026\012\014\013\040\014\045\016\030" +
    "\020\021\021\054\022\027\023\022\024\033\027\031\001" +
    "\001\000\032\005\124\006\015\010\036\011\026\012\014" +
    "\013\040\014\045\016\030\020\021\021\054\022\027\024" +
    "\033\001\001\000\004\015\207\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\004\221\005\037\006\015\010" +
    "\036\011\026\012\014\013\040\014\045\016\030\020\021" +
    "\021\054\022\027\023\022\024\033\027\031\001\001\000" +
    "\002\001\001\000\006\023\213\027\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\004\216\005\037\006" +
    "\015\010\036\011\026\012\014\013\040\014\045\016\030" +
    "\020\021\021\054\022\027\023\022\024\033\027\031\001" +
    "\001\000\032\005\124\006\015\010\036\011\026\012\014" +
    "\013\040\014\045\016\030\020\021\021\054\022\027\024" +
    "\033\001\001\000\004\015\220\001\001\000\002\001\001" +
    "\000\032\005\124\006\015\010\036\011\026\012\014\013" +
    "\040\014\045\016\030\020\021\021\054\022\027\024\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\023\227\027\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\235\001\001\000\010\023\240" +
    "\026\237\027\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\023\240" +
    "\026\243\027\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\245\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\250\027\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\004\263\005\037\006\015\010\036\011\026\012\014\013" +
    "\040\014\045\016\030\020\021\021\054\022\027\023\022" +
    "\024\033\027\031\001\001\000\032\005\124\006\015\010" +
    "\036\011\026\012\014\013\040\014\045\016\030\020\021" +
    "\021\054\022\027\024\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\305\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //Clases, objetos, variables, lista, etc... en sintaxis java    
    //Creo una lista de tipo String llamada 'salidas', donde guardare cada uno de las salidas analizadas
    //Para el proyecto se sugiere HashMap
    public List<String> salidas = new ArrayList<String>();
    public Map<String, Double> mapaDouble = new HashMap<>();    
    public Map<String, String> mapaString = new HashMap<>();


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= entradas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // entradas ::= PR_VOID PR_MAIN PARIZQ PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 String salida="def main() :{\n " + a + "\n} f__name__ = “__main__”: \nmain()";
                RESULT=salida; 
                salidas.add(salida);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entradas",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // entradas ::= archivo_json 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a; salidas.add(""+a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entradas",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a + "\n"+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencias ::= sentencias error 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= a + "\n #Error: "+b+"\n "+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencias ::= sentencia 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencias ::= expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // funciones ::= PR_VOID ID PARIZQ expresion PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="def "+ a +"("+b+"):{\n"+c+"\n}"; System.out.println("Debo retornar esto: def "+ a +"("+b+"):{\n"+c+"\n}");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // funciones ::= PR_VOID ID PARIZQ PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="def "+ a +"():{\n"+c+"\n}";  System.out.println("Debo retornar esto: def "+ a +"():{\n"+c+"\n}");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // funcion_globales ::= PR_VOID PR_DGLOBALES PARIZQ PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT="def DefinirGlobales() :{\n " + a + "\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_globales",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencia ::= sentencia_print 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencia ::= sentencia_declaracion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia ::= sentencia_globales 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencia ::= sentenciaIf 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia ::= sentenciaFor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= sentenciaSwitch 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia ::= sentenciaWhile 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= sentenciaDoWhile 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= funciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia ::= funcion_globales 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentenciaIf ::= PR_IF PARIZQ expresion PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT="if "+ a +":{\n" + b + "\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentenciaIf ::= PR_IF PARIZQ expresion PARDER LLAVIZQ sentencias LLAVDER sentenciaElse 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT="if "+ a +":{\n" + b + "\n}"+c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentenciaElse ::= PR_ELSE PR_IF PARIZQ expresion PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT="elif "+ a +":{\n" + b + "\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaElse",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentenciaElse ::= PR_ELSE PR_IF PARIZQ expresion PARDER LLAVIZQ sentencias LLAVDER sentenciaElse 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT="elif "+ a +":{\n" + b + "\n}"+c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaElse",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentenciaElse ::= PR_ELSE LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT="else :{\n" + b + "\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaElse",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentenciaFor ::= PR_FOR PARIZQ tipo_dato ID IGUAL expresion PTCOMA ID MENORQUE ENTERO PTCOMA ID MAS MAS PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT="for"+ a +"in range(1,"+b+"):{\n"+c+"\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaFor",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentenciaSwitch ::= PR_SWITCH PARIZQ ID PARDER LLAVIZQ sentenciasCase LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT="def switch(case, "+ a +"):{\n" + "switcher = { " + b + "\n}}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSwitch",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentenciasCase ::= PR_CASE expresion DOSPUNTOS sentencias PR_BREAK PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= a+": " + b+ ", \n "; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasCase",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentenciasCase ::= PR_CASE expresion DOSPUNTOS sentencias PR_BREAK PTCOMA sentenciasCase 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= a+": " + b+ ", \n " + c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasCase",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentenciasCase ::= PR_DEFAULT sentencias PR_BREAK PTCOMA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT="_: " + b+ ","; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasCase",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentenciaWhile ::= PR_WHILE PARIZQ expresion PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT="while "+ a +":{\n" + b + "\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentenciaDoWhile ::= PR_DO LLAVIZQ sentencias LLAVDER PR_WHILE PARIZQ expresion PARDER PTCOMA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT="while True:{"+ b +"if ("+a+"):{ \n break \n}"+"\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhile",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencia_print ::= PR_CONSOLE PUNTO PR_WRITE PARIZQ expresion PARDER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		    
       System.out.println("Debo retornar esto: print(" + a +")" );
       //Inserto en la lista de salidas de la expresión evaluada
       //salidas.add("print(" + a + ")");
       RESULT="print(" + a + ")";
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_print",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentencia_declaracion ::= tipo_dato ID IGUAL expresion PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=a+" "+b+" = "+c+";";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_declaracion",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentencia_declaracion ::= tipo_dato ID PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=a+" "+b+";";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_declaracion",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentencia_declaracion ::= tipo_dato CORIZQ CORDER ID IGUAL lista PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT= a +" [] "+b+ " = " +c+ ";" ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_declaracion",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // lista ::= LLAVIZQ elementos LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="[" +a+ "]";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // elementos ::= expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // elementos ::= elementos COMA elementos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= a + "," + b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tipo_dato ::= PR_INT 
            {
              Object RESULT =null;
		RESULT="int";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tipo_dato ::= PR_DOUBLE 
            {
              Object RESULT =null;
		RESULT="double";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tipo_dato ::= PR_STRING 
            {
              Object RESULT =null;
		RESULT="string";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tipo_dato ::= PR_BOOL 
            {
              Object RESULT =null;
		RESULT="bool";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion ::= expresion MAS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " + " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion ::= expresion POR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " * " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= expresion MENOS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " - " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion ::= expresion UMENOS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " - " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= expresion DIVIDIDO expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " / " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= expresion MAYORQUE expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " > " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= expresion MENORQUE expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " < " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= expresion MAYOROIGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " >= " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= expresion MENOROIGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " <= " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= expresion EQUALS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " == " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= expresion DISTINTO expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " != " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= expresion AND expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " and " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= expresion OR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + "or " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= NOT expresion 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = " not " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion ::= PARIZQ expresion PARDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="("+a+")";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion ::= STR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion ::= BOOLEANO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion ::= referencia_json 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // referencia_json ::= DOLLAR LLAVIZQ PR_NEWVALOR COMA STR COMA STR LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=a + "," + b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("referencia_json",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // archivo_json ::= LLAVIZQ miembro LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="{"+a+"}";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("archivo_json",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // miembro ::= STR DOSPUNTOS STR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " equals " + b;  System.out.println(a +"  vale "+ b); 
                                            mapaString.put(a,b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembro",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // miembro ::= STR DOSPUNTOS DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " equals " + b;  System.out.println(a +"  vale "+ b); 
                                          mapaDouble.put(a,Double.parseDouble(b));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembro",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // miembro ::= miembro COMA miembro 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+",\n"+b+"\n";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembro",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
