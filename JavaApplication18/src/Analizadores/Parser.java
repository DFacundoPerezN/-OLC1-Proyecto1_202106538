
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\140\000\002\002\004\000\002\002\003\000\002\003" +
    "\011\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\003\000\002\004\003\000\002\006\012\000" +
    "\002\006\011\000\002\010\011\000\002\011\004\000\002" +
    "\011\003\000\002\012\007\000\002\012\007\000\002\012" +
    "\007\000\002\012\007\000\002\013\011\000\002\013\011" +
    "\000\002\016\004\000\002\016\003\000\002\017\007\000" +
    "\002\017\007\000\002\017\007\000\002\017\013\000\002" +
    "\017\013\000\002\021\003\000\002\021\005\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\020\003" +
    "\000\002\020\005\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\025\011\000" +
    "\002\025\012\000\002\026\012\000\002\026\013\000\002" +
    "\026\006\000\002\031\024\000\002\027\011\000\002\030" +
    "\010\000\002\030\011\000\002\030\006\000\002\033\011" +
    "\000\002\032\013\000\002\022\011\000\002\023\007\000" +
    "\002\023\005\000\002\023\011\000\002\036\005\000\002" +
    "\037\003\000\002\037\005\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\004" +
    "\000\002\034\005\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\040\012\000\002\041\005\000\002\042" +
    "\005\000\002\042\005\000\002\042\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0110\000\006\010\005\043\010\001\002\000\004\002" +
    "\000\001\002\000\004\041\u010b\001\002\000\004\002\u010a" +
    "\001\002\000\004\002\ufffe\001\002\000\004\044\011\001" +
    "\002\000\004\005\012\001\002\000\004\006\013\001\002" +
    "\000\004\010\014\001\002\000\050\005\025\017\020\034" +
    "\024\035\054\036\021\037\034\040\036\041\050\043\051" +
    "\046\042\047\053\050\031\051\046\052\057\055\040\057" +
    "\026\060\045\064\055\065\044\001\002\000\036\003\uffdc" +
    "\007\uffdc\043\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052" +
    "\uffdc\055\uffdc\057\uffdc\060\uffdc\063\uffdc\064\uffdc\065\uffdc" +
    "\001\002\000\036\003\uffd3\007\uffd3\043\uffd3\046\uffd3\047" +
    "\uffd3\050\uffd3\051\uffd3\052\uffd3\055\uffd3\057\uffd3\060\uffd3" +
    "\063\uffd3\064\uffd3\065\uffd3\001\002\000\034\003\127\007" +
    "\u0109\043\051\046\042\047\053\050\031\051\046\052\057" +
    "\055\040\057\026\060\045\064\055\065\044\001\002\000" +
    "\004\010\u0102\001\002\000\100\003\uffab\004\uffab\006\uffab" +
    "\007\uffab\015\uffab\016\uffab\020\uffab\021\uffab\022\uffab\023" +
    "\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab\031\uffab" +
    "\032\uffab\033\uffab\042\uffab\043\uffab\046\uffab\047\uffab\050" +
    "\uffab\051\uffab\052\uffab\055\uffab\057\uffab\060\uffab\063\uffab" +
    "\064\uffab\065\uffab\001\002\000\036\003\uffd9\007\uffd9\043" +
    "\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\055\uffd9" +
    "\057\uffd9\060\uffd9\063\uffd9\064\uffd9\065\uffd9\001\002\000" +
    "\070\003\ufffa\007\ufffa\020\075\021\066\022\071\023\073" +
    "\024\072\025\074\026\100\027\067\030\065\031\076\032" +
    "\064\033\101\042\070\043\ufffa\046\ufffa\047\ufffa\050\ufffa" +
    "\051\ufffa\052\ufffa\055\ufffa\057\ufffa\060\ufffa\063\ufffa\064" +
    "\ufffa\065\ufffa\001\002\000\022\005\025\017\020\034\024" +
    "\035\054\036\021\037\034\040\036\041\050\001\002\000" +
    "\022\005\025\017\020\034\024\035\054\036\021\037\034" +
    "\040\036\041\050\001\002\000\004\005\356\001\002\000" +
    "\036\003\uffdd\007\uffdd\043\uffdd\046\uffdd\047\uffdd\050\uffdd" +
    "\051\uffdd\052\uffdd\055\uffdd\057\uffdd\060\uffdd\063\uffdd\064" +
    "\uffdd\065\uffdd\001\002\000\100\003\uffa7\004\uffa7\006\uffa7" +
    "\007\uffa7\015\uffa7\016\uffa7\020\uffa7\021\uffa7\022\uffa7\023" +
    "\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7" +
    "\032\uffa7\033\uffa7\042\uffa7\043\uffa7\046\uffa7\047\uffa7\050" +
    "\uffa7\051\uffa7\052\uffa7\055\uffa7\057\uffa7\060\uffa7\063\uffa7" +
    "\064\uffa7\065\uffa7\001\002\000\006\012\uffbe\040\uffbe\001" +
    "\002\000\036\003\uffd7\007\uffd7\043\uffd7\046\uffd7\047\uffd7" +
    "\050\uffd7\051\uffd7\052\uffd7\055\uffd7\057\uffd7\060\uffd7\063" +
    "\uffd7\064\uffd7\065\uffd7\001\002\000\036\003\uffd8\007\uffd8" +
    "\043\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\055" +
    "\uffd8\057\uffd8\060\uffd8\063\uffd8\064\uffd8\065\uffd8\001\002" +
    "\000\100\003\uffa8\004\uffa8\006\uffa8\007\uffa8\015\uffa8\016" +
    "\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8" +
    "\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\042" +
    "\uffa8\043\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8" +
    "\055\uffa8\057\uffa8\060\uffa8\063\uffa8\064\uffa8\065\uffa8\001" +
    "\002\000\006\012\335\040\336\001\002\000\100\003\uffaa" +
    "\004\uffaa\006\uffaa\007\uffaa\015\uffaa\016\uffaa\020\uffaa\021" +
    "\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa" +
    "\030\uffaa\031\uffaa\032\uffaa\033\uffaa\042\uffaa\043\uffaa\046" +
    "\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\055\uffaa\057\uffaa" +
    "\060\uffaa\063\uffaa\064\uffaa\065\uffaa\001\002\000\036\003" +
    "\uffd5\007\uffd5\043\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5" +
    "\052\uffd5\055\uffd5\057\uffd5\060\uffd5\063\uffd5\064\uffd5\065" +
    "\uffd5\001\002\000\004\005\312\001\002\000\036\003\ufffb" +
    "\007\ufffb\043\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\052" +
    "\ufffb\055\ufffb\057\ufffb\060\ufffb\063\ufffb\064\ufffb\065\ufffb" +
    "\001\002\000\006\012\uffbf\040\uffbf\001\002\000\036\003" +
    "\uffdb\007\uffdb\043\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb" +
    "\052\uffdb\055\uffdb\057\uffdb\060\uffdb\063\uffdb\064\uffdb\065" +
    "\uffdb\001\002\000\004\010\302\001\002\000\004\005\261" +
    "\001\002\000\006\012\uffbc\040\uffbc\001\002\000\036\003" +
    "\uffda\007\uffda\043\uffda\046\uffda\047\uffda\050\uffda\051\uffda" +
    "\052\uffda\055\uffda\057\uffda\060\uffda\063\uffda\064\uffda\065" +
    "\uffda\001\002\000\100\003\uffa9\004\uffa9\006\uffa9\007\uffa9" +
    "\015\uffa9\016\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024" +
    "\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9" +
    "\033\uffa9\042\uffa9\043\uffa9\046\uffa9\047\uffa9\050\uffa9\051" +
    "\uffa9\052\uffa9\055\uffa9\057\uffa9\060\uffa9\063\uffa9\064\uffa9" +
    "\065\uffa9\001\002\000\012\040\130\045\131\066\132\067" +
    "\133\001\002\000\036\003\uffd4\007\uffd4\043\uffd4\046\uffd4" +
    "\047\uffd4\050\uffd4\051\uffd4\052\uffd4\055\uffd4\057\uffd4\060" +
    "\uffd4\063\uffd4\064\uffd4\065\uffd4\001\002\000\006\012\uffbd" +
    "\040\uffbd\001\002\000\100\003\uffac\004\uffac\006\uffac\007" +
    "\uffac\015\uffac\016\uffac\020\uffac\021\uffac\022\uffac\023\uffac" +
    "\024\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032" +
    "\uffac\033\uffac\042\uffac\043\uffac\046\uffac\047\uffac\050\uffac" +
    "\051\uffac\052\uffac\055\uffac\057\uffac\060\uffac\063\uffac\064" +
    "\uffac\065\uffac\001\002\000\004\005\120\001\002\000\036" +
    "\003\uffd6\007\uffd6\043\uffd6\046\uffd6\047\uffd6\050\uffd6\051" +
    "\uffd6\052\uffd6\055\uffd6\057\uffd6\060\uffd6\063\uffd6\064\uffd6" +
    "\065\uffd6\001\002\000\004\014\060\001\002\000\004\053" +
    "\061\001\002\000\004\005\062\001\002\000\022\005\025" +
    "\017\020\034\024\035\054\036\021\037\034\040\036\041" +
    "\050\001\002\000\036\006\077\020\075\021\066\022\071" +
    "\023\073\024\072\025\074\026\100\027\067\030\065\031" +
    "\076\032\064\033\101\042\070\001\002\000\022\005\025" +
    "\017\020\034\024\035\054\036\021\037\034\040\036\041" +
    "\050\001\002\000\022\005\025\017\020\034\024\035\054" +
    "\036\021\037\034\040\036\041\050\001\002\000\022\005" +
    "\025\017\020\034\024\035\054\036\021\037\034\040\036" +
    "\041\050\001\002\000\022\005\025\017\020\034\024\035" +
    "\054\036\021\037\034\040\036\041\050\001\002\000\022" +
    "\005\025\017\020\034\024\035\054\036\021\037\034\040" +
    "\036\041\050\001\002\000\022\005\025\017\020\034\024" +
    "\035\054\036\021\037\034\040\036\041\050\001\002\000" +
    "\022\005\025\017\020\034\024\035\054\036\021\037\034" +
    "\040\036\041\050\001\002\000\022\005\025\017\020\034" +
    "\024\035\054\036\021\037\034\040\036\041\050\001\002" +
    "\000\022\005\025\017\020\034\024\035\054\036\021\037" +
    "\034\040\036\041\050\001\002\000\022\005\025\017\020" +
    "\034\024\035\054\036\021\037\034\040\036\041\050\001" +
    "\002\000\022\005\025\017\020\034\024\035\054\036\021" +
    "\037\034\040\036\041\050\001\002\000\004\004\104\001" +
    "\002\000\022\005\025\017\020\034\024\035\054\036\021" +
    "\037\034\040\036\041\050\001\002\000\022\005\025\017" +
    "\020\034\024\035\054\036\021\037\034\040\036\041\050" +
    "\001\002\000\100\003\uffaf\004\uffaf\006\uffaf\007\uffaf\015" +
    "\uffaf\016\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf" +
    "\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033" +
    "\uffaf\042\070\043\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf" +
    "\052\uffaf\055\uffaf\057\uffaf\060\uffaf\063\uffaf\064\uffaf\065" +
    "\uffaf\001\002\000\100\003\uffb2\004\uffb2\006\uffb2\007\uffb2" +
    "\015\uffb2\016\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024" +
    "\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\064" +
    "\033\101\042\070\043\uffb2\046\uffb2\047\uffb2\050\uffb2\051" +
    "\uffb2\052\uffb2\055\uffb2\057\uffb2\060\uffb2\063\uffb2\064\uffb2" +
    "\065\uffb2\001\002\000\036\003\uffc6\007\uffc6\043\uffc6\046" +
    "\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\055\uffc6\057\uffc6" +
    "\060\uffc6\063\uffc6\064\uffc6\065\uffc6\001\002\000\100\003" +
    "\uffb1\004\uffb1\006\uffb1\007\uffb1\015\uffb1\016\uffb1\020\uffb1" +
    "\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027" +
    "\uffb1\030\uffb1\031\uffb1\032\064\033\101\042\070\043\uffb1" +
    "\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\055\uffb1\057" +
    "\uffb1\060\uffb1\063\uffb1\064\uffb1\065\uffb1\001\002\000\100" +
    "\003\uffbb\004\uffbb\006\uffbb\007\uffbb\015\uffbb\016\uffbb\020" +
    "\uffbb\021\uffbb\022\071\023\073\024\072\025\074\026\100" +
    "\027\067\030\065\031\076\032\064\033\101\042\070\043" +
    "\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\055\uffbb" +
    "\057\uffbb\060\uffbb\063\uffbb\064\uffbb\065\uffbb\001\002\000" +
    "\100\003\uffb6\004\uffb6\006\uffb6\007\uffb6\015\uffb6\016\uffb6" +
    "\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026" +
    "\uffb6\027\uffb6\030\uffb6\031\uffb6\032\064\033\101\042\070" +
    "\043\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\055" +
    "\uffb6\057\uffb6\060\uffb6\063\uffb6\064\uffb6\065\uffb6\001\002" +
    "\000\100\003\uffb7\004\uffb7\006\uffb7\007\uffb7\015\uffb7\016" +
    "\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\072\025\074" +
    "\026\100\027\067\030\065\031\076\032\064\033\101\042" +
    "\070\043\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7" +
    "\055\uffb7\057\uffb7\060\uffb7\063\uffb7\064\uffb7\065\uffb7\001" +
    "\002\000\100\003\uffb5\004\uffb5\006\uffb5\007\uffb5\015\uffb5" +
    "\016\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025" +
    "\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032\064\033\101" +
    "\042\070\043\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052" +
    "\uffb5\055\uffb5\057\uffb5\060\uffb5\063\uffb5\064\uffb5\065\uffb5" +
    "\001\002\000\100\003\uffba\004\uffba\006\uffba\007\uffba\015" +
    "\uffba\016\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024\072" +
    "\025\074\026\100\027\067\030\065\031\076\032\064\033" +
    "\101\042\070\043\uffba\046\uffba\047\uffba\050\uffba\051\uffba" +
    "\052\uffba\055\uffba\057\uffba\060\uffba\063\uffba\064\uffba\065" +
    "\uffba\001\002\000\100\003\uffb8\004\uffb8\006\uffb8\007\uffb8" +
    "\015\uffb8\016\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024" +
    "\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8" +
    "\033\uffb8\042\070\043\uffb8\046\uffb8\047\uffb8\050\uffb8\051" +
    "\uffb8\052\uffb8\055\uffb8\057\uffb8\060\uffb8\063\uffb8\064\uffb8" +
    "\065\uffb8\001\002\000\100\003\uffb4\004\uffb4\006\uffb4\007" +
    "\uffb4\015\uffb4\016\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4" +
    "\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032" +
    "\064\033\101\042\070\043\uffb4\046\uffb4\047\uffb4\050\uffb4" +
    "\051\uffb4\052\uffb4\055\uffb4\057\uffb4\060\uffb4\063\uffb4\064" +
    "\uffb4\065\uffb4\001\002\000\100\003\uffb9\004\uffb9\006\uffb9" +
    "\007\uffb9\015\uffb9\016\uffb9\020\uffb9\021\uffb9\022\071\023" +
    "\073\024\072\025\074\026\100\027\067\030\065\031\076" +
    "\032\064\033\101\042\070\043\uffb9\046\uffb9\047\uffb9\050" +
    "\uffb9\051\uffb9\052\uffb9\055\uffb9\057\uffb9\060\uffb9\063\uffb9" +
    "\064\uffb9\065\uffb9\001\002\000\100\003\uffb3\004\uffb3\006" +
    "\uffb3\007\uffb3\015\uffb3\016\uffb3\020\uffb3\021\uffb3\022\uffb3" +
    "\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031" +
    "\uffb3\032\064\033\101\042\070\043\uffb3\046\uffb3\047\uffb3" +
    "\050\uffb3\051\uffb3\052\uffb3\055\uffb3\057\uffb3\060\uffb3\063" +
    "\uffb3\064\uffb3\065\uffb3\001\002\000\100\003\uffb0\004\uffb0" +
    "\006\uffb0\007\uffb0\015\uffb0\016\uffb0\020\uffb0\021\uffb0\022" +
    "\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0" +
    "\031\uffb0\032\uffb0\033\uffb0\042\070\043\uffb0\046\uffb0\047" +
    "\uffb0\050\uffb0\051\uffb0\052\uffb0\055\uffb0\057\uffb0\060\uffb0" +
    "\063\uffb0\064\uffb0\065\uffb0\001\002\000\022\005\025\017" +
    "\020\034\024\035\054\036\021\037\034\040\036\041\050" +
    "\001\002\000\036\006\122\020\075\021\066\022\071\023" +
    "\073\024\072\025\074\026\100\027\067\030\065\031\076" +
    "\032\064\033\101\042\070\001\002\000\004\010\123\001" +
    "\002\000\050\005\025\017\020\034\024\035\054\036\021" +
    "\037\034\040\036\041\050\043\051\046\042\047\053\050" +
    "\031\051\046\052\057\055\040\057\026\060\045\064\055" +
    "\065\044\001\002\000\034\003\127\007\125\043\051\046" +
    "\042\047\053\050\031\051\046\052\057\055\040\057\026" +
    "\060\045\064\055\065\044\001\002\000\036\003\uffc8\007" +
    "\uffc8\043\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8" +
    "\055\uffc8\057\uffc8\060\uffc8\063\uffc8\064\uffc8\065\uffc8\001" +
    "\002\000\036\003\ufffd\007\ufffd\043\ufffd\046\ufffd\047\ufffd" +
    "\050\ufffd\051\ufffd\052\ufffd\055\ufffd\057\ufffd\060\ufffd\063" +
    "\ufffd\064\ufffd\065\ufffd\001\002\000\036\003\ufffc\007\ufffc" +
    "\043\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc\055" +
    "\ufffc\057\ufffc\060\ufffc\063\ufffc\064\ufffc\065\ufffc\001\002" +
    "\000\004\005\247\001\002\000\004\005\222\001\002\000" +
    "\004\005\215\001\002\000\004\005\134\001\002\000\004" +
    "\006\135\001\002\000\004\010\136\001\002\000\006\047" +
    "\142\050\140\001\002\000\010\007\uffed\047\142\050\140" +
    "\001\002\000\004\012\176\001\002\000\004\007\175\001" +
    "\002\000\012\012\143\070\144\073\146\074\145\001\002" +
    "\000\004\011\163\001\002\000\004\013\160\001\002\000" +
    "\004\013\155\001\002\000\004\013\147\001\002\000\010" +
    "\017\020\040\150\041\152\001\002\000\010\004\uffde\007" +
    "\uffde\015\uffde\001\002\000\004\004\154\001\002\000\010" +
    "\004\uffe0\007\uffe0\015\uffe0\001\002\000\010\004\uffdf\007" +
    "\uffdf\015\uffdf\001\002\000\010\007\uffeb\047\uffeb\050\uffeb" +
    "\001\002\000\010\017\020\040\150\041\152\001\002\000" +
    "\004\004\157\001\002\000\010\007\uffea\047\uffea\050\uffea" +
    "\001\002\000\010\017\020\040\150\041\152\001\002\000" +
    "\004\004\162\001\002\000\010\007\uffec\047\uffec\050\uffec" +
    "\001\002\000\004\071\164\001\002\000\004\013\165\001" +
    "\002\000\004\010\166\001\002\000\010\017\020\040\150" +
    "\041\152\001\002\000\006\007\171\015\172\001\002\000" +
    "\006\007\uffe2\015\uffe2\001\002\000\004\004\174\001\002" +
    "\000\010\017\020\040\150\041\152\001\002\000\006\007" +
    "\uffe1\015\uffe1\001\002\000\010\007\uffe9\047\uffe9\050\uffe9" +
    "\001\002\000\036\003\uffef\007\uffef\043\uffef\046\uffef\047" +
    "\uffef\050\uffef\051\uffef\052\uffef\055\uffef\057\uffef\060\uffef" +
    "\063\uffef\064\uffef\065\uffef\001\002\000\004\011\177\001" +
    "\002\000\004\072\200\001\002\000\004\013\201\001\002" +
    "\000\004\010\202\001\002\000\010\017\020\036\206\040" +
    "\203\001\002\000\006\007\uffe3\015\uffe3\001\002\000\006" +
    "\007\210\015\211\001\002\000\006\007\uffe7\015\uffe7\001" +
    "\002\000\006\007\uffe5\015\uffe5\001\002\000\006\007\uffe4" +
    "\015\uffe4\001\002\000\004\004\213\001\002\000\010\017" +
    "\020\036\206\040\203\001\002\000\006\007\uffe6\015\uffe6" +
    "\001\002\000\010\007\uffe8\047\uffe8\050\uffe8\001\002\000" +
    "\004\007\uffee\001\002\000\004\006\216\001\002\000\004" +
    "\010\217\001\002\000\006\047\142\050\140\001\002\000" +
    "\004\007\221\001\002\000\036\003\ufff0\007\ufff0\043\ufff0" +
    "\046\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\055\ufff0\057" +
    "\ufff0\060\ufff0\063\ufff0\064\ufff0\065\ufff0\001\002\000\004" +
    "\006\223\001\002\000\004\010\224\001\002\000\006\047" +
    "\230\050\227\001\002\000\004\007\246\001\002\000\010" +
    "\007\ufff5\047\230\050\227\001\002\000\004\040\237\001" +
    "\002\000\004\040\231\001\002\000\004\013\232\001\002" +
    "\000\006\017\020\041\233\001\002\000\004\004\236\001" +
    "\002\000\004\004\235\001\002\000\010\007\ufff3\047\ufff3" +
    "\050\ufff3\001\002\000\010\007\ufff4\047\ufff4\050\ufff4\001" +
    "\002\000\004\013\240\001\002\000\006\017\020\036\241" +
    "\001\002\000\004\004\244\001\002\000\004\004\243\001" +
    "\002\000\010\007\ufff1\047\ufff1\050\ufff1\001\002\000\010" +
    "\007\ufff2\047\ufff2\050\ufff2\001\002\000\004\007\ufff6\001" +
    "\002\000\036\003\ufff7\007\ufff7\043\ufff7\046\ufff7\047\ufff7" +
    "\050\ufff7\051\ufff7\052\ufff7\055\ufff7\057\ufff7\060\ufff7\063" +
    "\ufff7\064\ufff7\065\ufff7\001\002\000\024\005\025\006\251" +
    "\017\020\034\024\035\054\036\021\037\034\040\036\041" +
    "\050\001\002\000\036\006\255\020\075\021\066\022\071" +
    "\023\073\024\072\025\074\026\100\027\067\030\065\031" +
    "\076\032\064\033\101\042\070\001\002\000\004\010\252" +
    "\001\002\000\050\005\025\017\020\034\024\035\054\036" +
    "\021\037\034\040\036\041\050\043\051\046\042\047\053" +
    "\050\031\051\046\052\057\055\040\057\026\060\045\064" +
    "\055\065\044\001\002\000\034\003\127\007\254\043\051" +
    "\046\042\047\053\050\031\051\046\052\057\055\040\057" +
    "\026\060\045\064\055\065\044\001\002\000\036\003\ufff8" +
    "\007\ufff8\043\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8\052" +
    "\ufff8\055\ufff8\057\ufff8\060\ufff8\063\ufff8\064\ufff8\065\ufff8" +
    "\001\002\000\004\010\256\001\002\000\050\005\025\017" +
    "\020\034\024\035\054\036\021\037\034\040\036\041\050" +
    "\043\051\046\042\047\053\050\031\051\046\052\057\055" +
    "\040\057\026\060\045\064\055\065\044\001\002\000\034" +
    "\003\127\007\260\043\051\046\042\047\053\050\031\051" +
    "\046\052\057\055\040\057\026\060\045\064\055\065\044" +
    "\001\002\000\036\003\ufff9\007\ufff9\043\ufff9\046\ufff9\047" +
    "\ufff9\050\ufff9\051\ufff9\052\ufff9\055\ufff9\057\ufff9\060\ufff9" +
    "\063\ufff9\064\ufff9\065\ufff9\001\002\000\004\040\262\001" +
    "\002\000\004\006\263\001\002\000\004\010\264\001\002" +
    "\000\006\061\267\062\265\001\002\000\050\005\025\017" +
    "\020\034\024\035\054\036\021\037\034\040\036\041\050" +
    "\043\051\046\042\047\053\050\031\051\046\052\057\055" +
    "\040\057\026\060\045\064\055\065\044\001\002\000\004" +
    "\007\276\001\002\000\022\005\025\017\020\034\024\035" +
    "\054\036\021\037\034\040\036\041\050\001\002\000\036" +
    "\016\271\020\075\021\066\022\071\023\073\024\072\025" +
    "\074\026\100\027\067\030\065\031\076\032\064\033\101" +
    "\042\070\001\002\000\050\005\025\017\020\034\024\035" +
    "\054\036\021\037\034\040\036\041\050\043\051\046\042" +
    "\047\053\050\031\051\046\052\057\055\040\057\026\060" +
    "\045\064\055\065\044\001\002\000\034\003\127\043\051" +
    "\046\042\047\053\050\031\051\046\052\057\055\040\057" +
    "\026\060\045\063\273\064\055\065\044\001\002\000\004" +
    "\004\274\001\002\000\010\007\uffcb\061\267\062\265\001" +
    "\002\000\004\007\uffca\001\002\000\036\003\uffcc\007\uffcc" +
    "\043\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\055" +
    "\uffcc\057\uffcc\060\uffcc\063\uffcc\064\uffcc\065\uffcc\001\002" +
    "\000\034\003\127\043\051\046\042\047\053\050\031\051" +
    "\046\052\057\055\040\057\026\060\045\063\300\064\055" +
    "\065\044\001\002\000\004\004\301\001\002\000\004\007" +
    "\uffc9\001\002\000\050\005\025\017\020\034\024\035\054" +
    "\036\021\037\034\040\036\041\050\043\051\046\042\047" +
    "\053\050\031\051\046\052\057\055\040\057\026\060\045" +
    "\064\055\065\044\001\002\000\034\003\127\007\304\043" +
    "\051\046\042\047\053\050\031\051\046\052\057\055\040" +
    "\057\026\060\045\064\055\065\044\001\002\000\004\064" +
    "\305\001\002\000\004\005\306\001\002\000\022\005\025" +
    "\017\020\034\024\035\054\036\021\037\034\040\036\041" +
    "\050\001\002\000\036\006\310\020\075\021\066\022\071" +
    "\023\073\024\072\025\074\026\100\027\067\030\065\031" +
    "\076\032\064\033\101\042\070\001\002\000\004\004\311" +
    "\001\002\000\036\003\uffc7\007\uffc7\043\uffc7\046\uffc7\047" +
    "\uffc7\050\uffc7\051\uffc7\052\uffc7\055\uffc7\057\uffc7\060\uffc7" +
    "\063\uffc7\064\uffc7\065\uffc7\001\002\000\022\005\025\017" +
    "\020\034\024\035\054\036\021\037\034\040\036\041\050" +
    "\001\002\000\036\006\314\020\075\021\066\022\071\023" +
    "\073\024\072\025\074\026\100\027\067\030\065\031\076" +
    "\032\064\033\101\042\070\001\002\000\004\010\315\001" +
    "\002\000\050\005\025\017\020\034\024\035\054\036\021" +
    "\037\034\040\036\041\050\043\051\046\042\047\053\050" +
    "\031\051\046\052\057\055\040\057\026\060\045\064\055" +
    "\065\044\001\002\000\034\003\127\007\317\043\051\046" +
    "\042\047\053\050\031\051\046\052\057\055\040\057\026" +
    "\060\045\064\055\065\044\001\002\000\040\003\uffd2\007" +
    "\uffd2\043\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2" +
    "\055\uffd2\056\320\057\uffd2\060\uffd2\063\uffd2\064\uffd2\065" +
    "\uffd2\001\002\000\006\010\322\055\323\001\002\000\036" +
    "\003\uffd1\007\uffd1\043\uffd1\046\uffd1\047\uffd1\050\uffd1\051" +
    "\uffd1\052\uffd1\055\uffd1\057\uffd1\060\uffd1\063\uffd1\064\uffd1" +
    "\065\uffd1\001\002\000\050\005\025\017\020\034\024\035" +
    "\054\036\021\037\034\040\036\041\050\043\051\046\042" +
    "\047\053\050\031\051\046\052\057\055\040\057\026\060" +
    "\045\064\055\065\044\001\002\000\004\005\324\001\002" +
    "\000\022\005\025\017\020\034\024\035\054\036\021\037" +
    "\034\040\036\041\050\001\002\000\036\006\326\020\075" +
    "\021\066\022\071\023\073\024\072\025\074\026\100\027" +
    "\067\030\065\031\076\032\064\033\101\042\070\001\002" +
    "\000\004\010\327\001\002\000\050\005\025\017\020\034" +
    "\024\035\054\036\021\037\034\040\036\041\050\043\051" +
    "\046\042\047\053\050\031\051\046\052\057\055\040\057" +
    "\026\060\045\064\055\065\044\001\002\000\034\003\127" +
    "\007\331\043\051\046\042\047\053\050\031\051\046\052" +
    "\057\055\040\057\026\060\045\064\055\065\044\001\002" +
    "\000\040\003\uffd0\007\uffd0\043\uffd0\046\uffd0\047\uffd0\050" +
    "\uffd0\051\uffd0\052\uffd0\055\uffd0\056\320\057\uffd0\060\uffd0" +
    "\063\uffd0\064\uffd0\065\uffd0\001\002\000\036\003\uffcf\007" +
    "\uffcf\043\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf" +
    "\055\uffcf\057\uffcf\060\uffcf\063\uffcf\064\uffcf\065\uffcf\001" +
    "\002\000\034\003\127\007\334\043\051\046\042\047\053" +
    "\050\031\051\046\052\057\055\040\057\026\060\045\064" +
    "\055\065\044\001\002\000\036\003\uffce\007\uffce\043\uffce" +
    "\046\uffce\047\uffce\050\uffce\051\uffce\052\uffce\055\uffce\057" +
    "\uffce\060\uffce\063\uffce\064\uffce\065\uffce\001\002\000\004" +
    "\011\343\001\002\000\006\004\340\013\337\001\002\000" +
    "\022\005\025\017\020\034\024\035\054\036\021\037\034" +
    "\040\036\041\050\001\002\000\036\003\uffc4\007\uffc4\043" +
    "\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\055\uffc4" +
    "\057\uffc4\060\uffc4\063\uffc4\064\uffc4\065\uffc4\001\002\000" +
    "\036\004\342\020\075\021\066\022\071\023\073\024\072" +
    "\025\074\026\100\027\067\030\065\031\076\032\064\033" +
    "\101\042\070\001\002\000\036\003\uffc5\007\uffc5\043\uffc5" +
    "\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\055\uffc5\057" +
    "\uffc5\060\uffc5\063\uffc5\064\uffc5\065\uffc5\001\002\000\004" +
    "\040\344\001\002\000\004\013\345\001\002\000\004\010" +
    "\346\001\002\000\022\005\025\017\020\034\024\035\054" +
    "\036\021\037\034\040\036\041\050\001\002\000\004\004" +
    "\350\001\002\000\036\003\uffc3\007\uffc3\043\uffc3\046\uffc3" +
    "\047\uffc3\050\uffc3\051\uffc3\052\uffc3\055\uffc3\057\uffc3\060" +
    "\uffc3\063\uffc3\064\uffc3\065\uffc3\001\002\000\006\007\353" +
    "\015\354\001\002\000\040\007\uffc1\015\uffc1\020\075\021" +
    "\066\022\071\023\073\024\072\025\074\026\100\027\067" +
    "\030\065\031\076\032\064\033\101\042\070\001\002\000" +
    "\004\004\uffc2\001\002\000\022\005\025\017\020\034\024" +
    "\035\054\036\021\037\034\040\036\041\050\001\002\000" +
    "\006\007\uffc0\015\uffc0\001\002\000\012\046\042\047\053" +
    "\050\031\051\046\001\002\000\004\040\360\001\002\000" +
    "\004\013\361\001\002\000\022\005\025\017\020\034\024" +
    "\035\054\036\021\037\034\040\036\041\050\001\002\000" +
    "\036\004\363\020\075\021\066\022\071\023\073\024\072" +
    "\025\074\026\100\027\067\030\065\031\076\032\064\033" +
    "\101\042\070\001\002\000\004\040\364\001\002\000\004" +
    "\024\365\001\002\000\004\035\366\001\002\000\004\004" +
    "\367\001\002\000\004\040\370\001\002\000\004\020\371" +
    "\001\002\000\004\020\372\001\002\000\004\006\373\001" +
    "\002\000\004\010\374\001\002\000\050\005\025\017\020" +
    "\034\024\035\054\036\021\037\034\040\036\041\050\043" +
    "\051\046\042\047\053\050\031\051\046\052\057\055\040" +
    "\057\026\060\045\064\055\065\044\001\002\000\034\003" +
    "\127\007\376\043\051\046\042\047\053\050\031\051\046" +
    "\052\057\055\040\057\026\060\045\064\055\065\044\001" +
    "\002\000\036\003\uffcd\007\uffcd\043\uffcd\046\uffcd\047\uffcd" +
    "\050\uffcd\051\uffcd\052\uffcd\055\uffcd\057\uffcd\060\uffcd\063" +
    "\uffcd\064\uffcd\065\uffcd\001\002\000\036\006\u0100\020\075" +
    "\021\066\022\071\023\073\024\072\025\074\026\100\027" +
    "\067\030\065\031\076\032\064\033\101\042\070\001\002" +
    "\000\100\003\uffad\004\uffad\006\uffad\007\uffad\015\uffad\016" +
    "\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad" +
    "\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad\042" +
    "\uffad\043\uffad\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad" +
    "\055\uffad\057\uffad\060\uffad\063\uffad\064\uffad\065\uffad\001" +
    "\002\000\100\003\uffae\004\uffae\006\uffae\007\uffae\015\uffae" +
    "\016\uffae\020\075\021\066\022\071\023\073\024\072\025" +
    "\074\026\100\027\067\030\065\031\076\032\064\033\101" +
    "\042\070\043\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052" +
    "\uffae\055\uffae\057\uffae\060\uffae\063\uffae\064\uffae\065\uffae" +
    "\001\002\000\004\054\u0103\001\002\000\004\015\u0104\001" +
    "\002\000\004\041\u0105\001\002\000\004\015\u0106\001\002" +
    "\000\004\041\u0107\001\002\000\004\007\u0108\001\002\000" +
    "\100\003\uffa6\004\uffa6\006\uffa6\007\uffa6\015\uffa6\016\uffa6" +
    "\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\026" +
    "\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\042\uffa6" +
    "\043\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6\055" +
    "\uffa6\057\uffa6\060\uffa6\063\uffa6\064\uffa6\065\uffa6\001\002" +
    "\000\004\002\uffff\001\002\000\004\002\001\001\002\000" +
    "\004\016\u0110\001\002\000\006\007\u010e\015\u010d\001\002" +
    "\000\004\041\u010b\001\002\000\004\002\uffa5\001\002\000" +
    "\006\007\uffa2\015\uffa2\001\002\000\006\036\u0112\041\u0111" +
    "\001\002\000\006\007\uffa4\015\uffa4\001\002\000\006\007" +
    "\uffa3\015\uffa3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0110\000\010\002\005\003\003\041\006\001\001\000" +
    "\002\001\001\000\004\042\u010b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\004\016\005\040" +
    "\006\015\010\036\013\051\022\026\023\014\024\042\025" +
    "\046\027\032\031\021\032\055\033\031\034\022\035\034" +
    "\040\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\005\125\006\015\010\036\013\051\022\026\023\014" +
    "\024\042\025\046\027\032\031\021\032\055\033\031\035" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\034\u0100\040\027\001" +
    "\001\000\006\034\376\040\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\034\062\040\027\001\001\000" +
    "\002\001\001\000\006\034\116\040\027\001\001\000\006" +
    "\034\115\040\027\001\001\000\006\034\114\040\027\001" +
    "\001\000\006\034\113\040\027\001\001\000\006\034\112" +
    "\040\027\001\001\000\006\034\111\040\027\001\001\000" +
    "\006\034\110\040\027\001\001\000\006\034\107\040\027" +
    "\001\001\000\006\034\106\040\027\001\001\000\006\034" +
    "\105\040\027\001\001\000\006\034\104\040\027\001\001" +
    "\000\002\001\001\000\006\034\102\040\027\001\001\000" +
    "\006\034\101\040\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\034\120\040\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\004\123\005\040\006\015\010\036\013\051" +
    "\022\026\023\014\024\042\025\046\027\032\031\021\032" +
    "\055\033\031\034\022\035\034\040\027\001\001\000\034" +
    "\005\125\006\015\010\036\013\051\022\026\023\014\024" +
    "\042\025\046\027\032\031\021\032\055\033\031\035\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\140\017\136\001\001\000\006\016\213\017\136" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\150\040\152\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\155\040\152\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\160" +
    "\040\152\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\014\167\020\166\040\152\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\014\167\020\172" +
    "\040\152\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\204\021\203\040" +
    "\206\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\015\204\021\211\040\206\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\217\017\136\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\224\012\225\001\001\000\002" +
    "\001\001\000\006\011\244\012\225\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\233" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\241" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\034\247\040\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\004\252\005\040\006\015\010\036" +
    "\013\051\022\026\023\014\024\042\025\046\027\032\031" +
    "\021\032\055\033\031\034\022\035\034\040\027\001\001" +
    "\000\034\005\125\006\015\010\036\013\051\022\026\023" +
    "\014\024\042\025\046\027\032\031\021\032\055\033\031" +
    "\035\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\004\256\005\040\006\015\010\036\013\051\022\026" +
    "\023\014\024\042\025\046\027\032\031\021\032\055\033" +
    "\031\034\022\035\034\040\027\001\001\000\034\005\125" +
    "\006\015\010\036\013\051\022\026\023\014\024\042\025" +
    "\046\027\032\031\021\032\055\033\031\035\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\265\001\001\000\042\004\276" +
    "\005\040\006\015\010\036\013\051\022\026\023\014\024" +
    "\042\025\046\027\032\031\021\032\055\033\031\034\022" +
    "\035\034\040\027\001\001\000\002\001\001\000\006\034" +
    "\267\040\027\001\001\000\002\001\001\000\042\004\271" +
    "\005\040\006\015\010\036\013\051\022\026\023\014\024" +
    "\042\025\046\027\032\031\021\032\055\033\031\034\022" +
    "\035\034\040\027\001\001\000\034\005\125\006\015\010" +
    "\036\013\051\022\026\023\014\024\042\025\046\027\032" +
    "\031\021\032\055\033\031\035\034\001\001\000\002\001" +
    "\001\000\004\030\274\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\005\125\006\015\010\036\013\051\022" +
    "\026\023\014\024\042\025\046\027\032\031\021\032\055" +
    "\033\031\035\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\004\302\005\040\006\015\010\036\013\051" +
    "\022\026\023\014\024\042\025\046\027\032\031\021\032" +
    "\055\033\031\034\022\035\034\040\027\001\001\000\034" +
    "\005\125\006\015\010\036\013\051\022\026\023\014\024" +
    "\042\025\046\027\032\031\021\032\055\033\031\035\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\034" +
    "\306\040\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\034\312\040\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\004\315\005\040" +
    "\006\015\010\036\013\051\022\026\023\014\024\042\025" +
    "\046\027\032\031\021\032\055\033\031\034\022\035\034" +
    "\040\027\001\001\000\034\005\125\006\015\010\036\013" +
    "\051\022\026\023\014\024\042\025\046\027\032\031\021" +
    "\032\055\033\031\035\034\001\001\000\004\026\320\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\004\332" +
    "\005\040\006\015\010\036\013\051\022\026\023\014\024" +
    "\042\025\046\027\032\031\021\032\055\033\031\034\022" +
    "\035\034\040\027\001\001\000\002\001\001\000\006\034" +
    "\324\040\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\004\327\005\040\006\015\010\036\013\051\022" +
    "\026\023\014\024\042\025\046\027\032\031\021\032\055" +
    "\033\031\034\022\035\034\040\027\001\001\000\034\005" +
    "\125\006\015\010\036\013\051\022\026\023\014\024\042" +
    "\025\046\027\032\031\021\032\055\033\031\035\034\001" +
    "\001\000\004\026\331\001\001\000\002\001\001\000\034" +
    "\005\125\006\015\010\036\013\051\022\026\023\014\024" +
    "\042\025\046\027\032\031\021\032\055\033\031\035\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\034\340\040\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\346\001\001\000\010\034\351" +
    "\037\350\040\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\034\351\037\354\040\027\001\001\000\002\001" +
    "\001\000\004\035\356\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\034\361\040\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\004\374\005\040\006\015\010\036\013\051\022\026\023" +
    "\014\024\042\025\046\027\032\031\021\032\055\033\031" +
    "\034\022\035\034\040\027\001\001\000\034\005\125\006" +
    "\015\010\036\013\051\022\026\023\014\024\042\025\046" +
    "\027\032\031\021\032\055\033\031\035\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\u010e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //Clases, objetos, variables, lista, etc... en sintaxis java    
    //Creo una lista de tipo String llamada 'salidas', donde guardare cada uno de las salidas analizadas
    //Para el proyecto se sugiere HashMap
    public List<String> salidas = new ArrayList<String>();
    public Map<String, Double> mapaDouble = new HashMap<>();    
    public Map<String, String> mapaString = new HashMap<>();

public void mostrarIntGlobales(){
    for (Map.Entry<String, Double> entry : mapaDouble.entrySet()) {
        System.out.println("Variable global "+entry.getKey() + " vale " + entry.getValue());
        if(entry.getValue() == null){
            mapaDouble.put(entry.getKey(),0.0);
        }
    }
}

public void mostrarStringGlobales(){
    for (Map.Entry<String, String> entry : mapaString.entrySet()) {
        System.out.println("Variable global " + entry.getKey() + " vale " + entry.getValue());
        if(entry.getValue() == null){
            mapaString.put(entry.getKey(),entry.getKey());
        }
    }
}
    public String titulo = "titulo";
    public List<String> ejeX = new ArrayList<String>();
    public List<String> ejeY = new ArrayList<String>();
    public List<Double> valores = new ArrayList<>();
    public String tituloX = "tituloX";
    public String tituloY = "tituloY";

public void agregarValor(String a){
    try {   
           double decimal = Double.parseDouble(a);
           valores.add(decimal);
        }catch (Exception ex) {
            System.out.println("Error al recibir valor, se ingresara un 0");
            valores.add(0.0);
        }
}
public void agregarString(String a){
    try {   
           ejeX.add(a+"");
        }catch (Exception ex) {
            System.out.println("Error al recibir texto, se ingresara un 0");
           ejeX.add("texto");
        }
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= entradas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // entradas ::= PR_VOID PR_MAIN PARIZQ PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 String salida="def main() :{\n " + a + "\n} f__name__ = “__main__”: \nmain()";
                RESULT=salida; 
                salidas.add(salida);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entradas",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // entradas ::= archivo_json 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a; salidas.add(""+a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entradas",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a + "\n"+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencias ::= sentencias error 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= a + "\n #Error: "+b+"\n "+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencias ::= sentencia 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencias ::= expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // funciones ::= PR_VOID ID PARIZQ expresion PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="def "+ a +"("+b+"):{\n"+c+"\n}"; System.out.println("Debo retornar esto: def "+ a +"("+b+"):{\n"+c+"\n}");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // funciones ::= PR_VOID ID PARIZQ PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="def "+ a +"():{\n"+c+"\n}";  System.out.println("Debo retornar esto: def "+ a +"():{\n"+c+"\n}");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // funcion_globales ::= PR_VOID PR_DGLOBALES PARIZQ PARDER LLAVIZQ sentencias_globales LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT="def DefinirGlobales() :{\n " + a + "\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_globales",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencias_globales ::= sentencia_global sentencias_globales 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a + "\n"+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias_globales",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencias_globales ::= sentencia_global 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias_globales",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia_global ::= PR_STRING ID IGUAL STR PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="String "+a+" = "+b+ ";";  mapaString.put(a,b); mostrarStringGlobales();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_global",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencia_global ::= PR_STRING ID IGUAL referencia_json PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="String "+a+" = "+b+";"; mapaString.put(a,mapaString.get(b)); mostrarStringGlobales();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_global",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia_global ::= PR_DECIMAL ID IGUAL DECIMAL PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="Double "+a+" = "+b+";"; mapaDouble.put(a,Double.parseDouble(b)); mostrarIntGlobales();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_global",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia_global ::= PR_DECIMAL ID IGUAL referencia_json PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="Double "+a+" = "+b+";"; mapaDouble.put(a,mapaDouble.get(b)); mostrarIntGlobales();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_global",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // funcion_grafica ::= PR_VOID PR_GBARRAS PARIZQ PARDER LLAVIZQ sentencias_graficas LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT="def GraficaBarras() :{\n " + a + "\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_grafica",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // funcion_grafica ::= PR_VOID PR_GPIE PARIZQ PARDER LLAVIZQ sentencias_graficas LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT="def DefinirGlobales() :{\n " + a + "\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_grafica",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencias_graficas ::= sentencia_grafica sentencias_graficas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a + "\n"+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias_graficas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencias_graficas ::= sentencia_grafica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias_graficas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia_grafica ::= PR_STRING PR_TITULO IGUAL valor_string PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="String titulo = "+a+";"; titulo = a+""; System.out.println("Valor titulo: " + titulo) ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_grafica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia_grafica ::= PR_STRING PR_TITULOX IGUAL valor_string PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="String tituloX = "+a+";"; tituloX = a+"";System.out.println("Valor tituloX: " + tituloX) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_grafica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencia_grafica ::= PR_STRING PR_TITULOY IGUAL valor_string PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="String tituloY = "+a+";"; tituloY = a+"";System.out.println("Valor tituloY: " + tituloY) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_grafica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencia_grafica ::= PR_STRING CORIZQ CORDER PR_EJEX IGUAL LLAVIZQ elementos_string LLAVDER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT="String [] ejeX = {"+a+"}";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_grafica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia_grafica ::= PR_DECIMAL CORIZQ CORDER PR_VALORES IGUAL LLAVIZQ elementos_double LLAVDER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT="int [] valores = {"+a+"}";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_grafica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // elementos_double ::= valor_double 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a;  agregarValor(a+"");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos_double",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // elementos_double ::= elementos_double COMA elementos_double 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+","+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos_double",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // valor_double ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_double",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // valor_double ::= referencia_json 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=mapaDouble.get(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_double",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // valor_double ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=mapaDouble.get(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_double",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // elementos_string ::= valor_string 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; agregarString(a+"");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos_string",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // elementos_string ::= elementos_string COMA elementos_string 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+","+b+"";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos_string",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // valor_string ::= STR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_string",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // valor_string ::= referencia_json 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=mapaString.get(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_string",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // valor_string ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=mapaString.get(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_string",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentencia ::= sentencia_print 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencia ::= sentencia_declaracion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentencia ::= sentencia_globales 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentencia ::= sentenciaIf 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentencia ::= sentenciaFor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentencia ::= sentenciaSwitch 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sentencia ::= sentenciaWhile 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sentencia ::= sentenciaDoWhile 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sentencia ::= funcion_globales 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sentencia ::= funcion_grafica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sentencia ::= funciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sentenciaIf ::= PR_IF PARIZQ expresion PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT="if "+ a +":{\n" + b + "\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sentenciaIf ::= PR_IF PARIZQ expresion PARDER LLAVIZQ sentencias LLAVDER sentenciaElse 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT="if "+ a +":{\n" + b + "\n}"+c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sentenciaElse ::= PR_ELSE PR_IF PARIZQ expresion PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT="elif "+ a +":{\n" + b + "\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaElse",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sentenciaElse ::= PR_ELSE PR_IF PARIZQ expresion PARDER LLAVIZQ sentencias LLAVDER sentenciaElse 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT="elif "+ a +":{\n" + b + "\n}"+c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaElse",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sentenciaElse ::= PR_ELSE LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT="else :{\n" + b + "\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaElse",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sentenciaFor ::= PR_FOR PARIZQ tipo_dato ID IGUAL expresion PTCOMA ID MENORQUE ENTERO PTCOMA ID MAS MAS PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT="for"+ a +"in range(1,"+b+"):{\n"+c+"\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaFor",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sentenciaSwitch ::= PR_SWITCH PARIZQ ID PARDER LLAVIZQ sentenciasCase LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT="def switch(case, "+ a +"):{\n" + "switcher = { " + b + "\n}}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaSwitch",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sentenciasCase ::= PR_CASE expresion DOSPUNTOS sentencias PR_BREAK PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= a+": " + b+ ", \n "; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasCase",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sentenciasCase ::= PR_CASE expresion DOSPUNTOS sentencias PR_BREAK PTCOMA sentenciasCase 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= a+": " + b+ ", \n " + c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasCase",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sentenciasCase ::= PR_DEFAULT sentencias PR_BREAK PTCOMA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT="4: " + b+ ","; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasCase",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sentenciaWhile ::= PR_WHILE PARIZQ expresion PARDER LLAVIZQ sentencias LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT="while "+ a +":{\n" + b + "\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sentenciaDoWhile ::= PR_DO LLAVIZQ sentencias LLAVDER PR_WHILE PARIZQ expresion PARDER PTCOMA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT="while True:{"+ b +"if ("+a+"):{ \n break \n}"+"\n}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciaDoWhile",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sentencia_print ::= PR_CONSOLE PUNTO PR_WRITE PARIZQ expresion PARDER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		    
       System.out.println("Debo retornar esto: print(" + a +")" );
       //Inserto en la lista de salidas de la expresión evaluada
       //salidas.add("print(" + a + ")");
       RESULT="print(" + a + ")";
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_print",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sentencia_declaracion ::= tipo_dato ID IGUAL expresion PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=a+" "+b+" = "+c+";";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_declaracion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sentencia_declaracion ::= tipo_dato ID PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=a+" "+b+";";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_declaracion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sentencia_declaracion ::= tipo_dato CORIZQ CORDER ID IGUAL lista PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT= a +" [] "+b+ " = " +c+ ";" ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_declaracion",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // lista ::= LLAVIZQ elementos LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="[" +a+ "]";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // elementos ::= expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=""+a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // elementos ::= elementos COMA elementos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= ""+a + "," + b+"";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // tipo_dato ::= PR_INT 
            {
              Object RESULT =null;
		RESULT="int";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // tipo_dato ::= PR_DECIMAL 
            {
              Object RESULT =null;
		RESULT="double";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // tipo_dato ::= PR_STRING 
            {
              Object RESULT =null;
		RESULT="string";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // tipo_dato ::= PR_BOOL 
            {
              Object RESULT =null;
		RESULT="bool";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion ::= expresion MAS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " + " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion ::= expresion POR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " * " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion ::= expresion MENOS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " - " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion ::= expresion UMENOS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " - " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion ::= expresion DIVIDIDO expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " / " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion ::= expresion MAYORQUE expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " > " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion ::= expresion MENORQUE expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " < " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion ::= expresion MAYOROIGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " >= " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion ::= expresion MENOROIGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " <= " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion ::= expresion EQUALS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " == " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresion ::= expresion DISTINTO expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " != " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresion ::= expresion AND expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " and " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion ::= expresion OR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " or " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresion ::= NOT expresion 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = " not " + b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresion ::= PARIZQ expresion PARDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="("+a+")";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresion ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresion ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion ::= STR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion ::= BOOLEANO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion ::= referencia_json 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // referencia_json ::= DOLLAR LLAVIZQ PR_NEWVALOR COMA STR COMA STR LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=/*"${NewValor,"+ a + "," +*/ b /*+"}"*/ ; System.out.println("${NewValor,"+ a + "," + b+"}");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("referencia_json",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // archivo_json ::= LLAVIZQ miembro LLAVDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT="{"+a+"}";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("archivo_json",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // miembro ::= STR DOSPUNTOS STR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " equals " + b;  System.out.println(a +"  vale "+ b); 
                                            mapaString.put(a,b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembro",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // miembro ::= STR DOSPUNTOS DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a + " equals " + b;  System.out.println(a +"  vale "+ b); 
                                          mapaDouble.put(a,Double.parseDouble(b));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembro",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // miembro ::= miembro COMA miembro 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a+",\n"+b+"\n";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("miembro",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
